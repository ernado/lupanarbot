// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleXRiotToken handles X-Riot-Token security.
	// API key in header.
	HandleXRiotToken(ctx context.Context, operationName OperationName, t XRiotToken) (context.Context, error)
	// HandleAPIKey handles api_key security.
	// API key in query param.
	HandleAPIKey(ctx context.Context, operationName OperationName, t APIKey) (context.Context, error)
	// HandleRso handles rso security.
	// Riot Sign-On (RSO).
	HandleRso(ctx context.Context, operationName OperationName, t Rso) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesXRiotToken = map[string][]string{
	AccountV1GetActiveRegionOperation:                        []string{},
	AccountV1GetActiveShardOperation:                         []string{},
	AccountV1GetByPuuidOperation:                             []string{},
	AccountV1GetByRiotIdOperation:                            []string{},
	ChampionMasteryV4GetAllChampionMasteriesByPUUIDOperation: []string{},
	ChampionMasteryV4GetChampionMasteryByPUUIDOperation:      []string{},
	ChampionMasteryV4GetChampionMasteryScoreByPUUIDOperation: []string{},
	ChampionMasteryV4GetTopChampionMasteriesByPUUIDOperation: []string{},
	ChampionV3GetChampionInfoOperation:                       []string{},
	ClashV1GetPlayersByPUUIDOperation:                        []string{},
	ClashV1GetTeamByIdOperation:                              []string{},
	ClashV1GetTournamentByIdOperation:                        []string{},
	ClashV1GetTournamentByTeamOperation:                      []string{},
	ClashV1GetTournamentsOperation:                           []string{},
	LeagueExpV4GetLeagueEntriesOperation:                     []string{},
	LeagueV4GetChallengerLeagueOperation:                     []string{},
	LeagueV4GetGrandmasterLeagueOperation:                    []string{},
	LeagueV4GetLeagueByIdOperation:                           []string{},
	LeagueV4GetLeagueEntriesOperation:                        []string{},
	LeagueV4GetLeagueEntriesByPUUIDOperation:                 []string{},
	LeagueV4GetMasterLeagueOperation:                         []string{},
	LolChallengesV1GetAllChallengeConfigsOperation:           []string{},
	LolChallengesV1GetAllChallengePercentilesOperation:       []string{},
	LolChallengesV1GetChallengeConfigsOperation:              []string{},
	LolChallengesV1GetChallengeLeaderboardsOperation:         []string{},
	LolChallengesV1GetChallengePercentilesOperation:          []string{},
	LolChallengesV1GetPlayerDataOperation:                    []string{},
	LolStatusV4GetPlatformDataOperation:                      []string{},
	LorMatchV1GetMatchOperation:                              []string{},
	LorMatchV1GetMatchIdsByPUUIDOperation:                    []string{},
	LorRankedV1GetLeaderboardsOperation:                      []string{},
	LorStatusV1GetPlatformDataOperation:                      []string{},
	MatchV5GetMatchOperation:                                 []string{},
	MatchV5GetMatchIdsByPUUIDOperation:                       []string{},
	MatchV5GetTimelineOperation:                              []string{},
	SpectatorTftV5GetCurrentGameInfoByPuuidOperation:         []string{},
	SpectatorTftV5GetFeaturedGamesOperation:                  []string{},
	SpectatorV5GetCurrentGameInfoByPuuidOperation:            []string{},
	SpectatorV5GetFeaturedGamesOperation:                     []string{},
	SummonerV4GetByPUUIDOperation:                            []string{},
	TftLeagueV1GetChallengerLeagueOperation:                  []string{},
	TftLeagueV1GetGrandmasterLeagueOperation:                 []string{},
	TftLeagueV1GetLeagueByIdOperation:                        []string{},
	TftLeagueV1GetLeagueEntriesOperation:                     []string{},
	TftLeagueV1GetLeagueEntriesByPUUIDOperation:              []string{},
	TftLeagueV1GetMasterLeagueOperation:                      []string{},
	TftLeagueV1GetTopRatedLadderOperation:                    []string{},
	TftMatchV1GetMatchOperation:                              []string{},
	TftMatchV1GetMatchIdsByPUUIDOperation:                    []string{},
	TftStatusV1GetPlatformDataOperation:                      []string{},
	TftSummonerV1GetByPUUIDOperation:                         []string{},
	TournamentStubV5CreateTournamentCodeOperation:            []string{},
	TournamentStubV5GetLobbyEventsByCodeOperation:            []string{},
	TournamentStubV5GetTournamentCodeOperation:               []string{},
	TournamentStubV5RegisterProviderDataOperation:            []string{},
	TournamentStubV5RegisterTournamentOperation:              []string{},
	TournamentV5CreateTournamentCodeOperation:                []string{},
	TournamentV5GetGamesOperation:                            []string{},
	TournamentV5GetLobbyEventsByCodeOperation:                []string{},
	TournamentV5GetTournamentCodeOperation:                   []string{},
	TournamentV5RegisterProviderDataOperation:                []string{},
	TournamentV5RegisterTournamentOperation:                  []string{},
	TournamentV5UpdateCodeOperation:                          []string{},
	ValConsoleMatchV1GetMatchOperation:                       []string{},
	ValConsoleMatchV1GetMatchlistOperation:                   []string{},
	ValConsoleMatchV1GetRecentOperation:                      []string{},
	ValConsoleRankedV1GetLeaderboardOperation:                []string{},
	ValContentV1GetContentOperation:                          []string{},
	ValMatchV1GetMatchOperation:                              []string{},
	ValMatchV1GetMatchlistOperation:                          []string{},
	ValMatchV1GetRecentOperation:                             []string{},
	ValRankedV1GetLeaderboardOperation:                       []string{},
	ValStatusV1GetPlatformDataOperation:                      []string{},
}

func (s *Server) securityXRiotToken(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t XRiotToken
	const parameterName = "X-Riot-Token"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	t.Roles = operationRolesXRiotToken[operationName]
	rctx, err := s.sec.HandleXRiotToken(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesAPIKey = map[string][]string{
	AccountV1GetActiveRegionOperation:                        []string{},
	AccountV1GetActiveShardOperation:                         []string{},
	AccountV1GetByPuuidOperation:                             []string{},
	AccountV1GetByRiotIdOperation:                            []string{},
	ChampionMasteryV4GetAllChampionMasteriesByPUUIDOperation: []string{},
	ChampionMasteryV4GetChampionMasteryByPUUIDOperation:      []string{},
	ChampionMasteryV4GetChampionMasteryScoreByPUUIDOperation: []string{},
	ChampionMasteryV4GetTopChampionMasteriesByPUUIDOperation: []string{},
	ChampionV3GetChampionInfoOperation:                       []string{},
	ClashV1GetPlayersByPUUIDOperation:                        []string{},
	ClashV1GetTeamByIdOperation:                              []string{},
	ClashV1GetTournamentByIdOperation:                        []string{},
	ClashV1GetTournamentByTeamOperation:                      []string{},
	ClashV1GetTournamentsOperation:                           []string{},
	LeagueExpV4GetLeagueEntriesOperation:                     []string{},
	LeagueV4GetChallengerLeagueOperation:                     []string{},
	LeagueV4GetGrandmasterLeagueOperation:                    []string{},
	LeagueV4GetLeagueByIdOperation:                           []string{},
	LeagueV4GetLeagueEntriesOperation:                        []string{},
	LeagueV4GetLeagueEntriesByPUUIDOperation:                 []string{},
	LeagueV4GetMasterLeagueOperation:                         []string{},
	LolChallengesV1GetAllChallengeConfigsOperation:           []string{},
	LolChallengesV1GetAllChallengePercentilesOperation:       []string{},
	LolChallengesV1GetChallengeConfigsOperation:              []string{},
	LolChallengesV1GetChallengeLeaderboardsOperation:         []string{},
	LolChallengesV1GetChallengePercentilesOperation:          []string{},
	LolChallengesV1GetPlayerDataOperation:                    []string{},
	LolStatusV4GetPlatformDataOperation:                      []string{},
	LorMatchV1GetMatchOperation:                              []string{},
	LorMatchV1GetMatchIdsByPUUIDOperation:                    []string{},
	LorRankedV1GetLeaderboardsOperation:                      []string{},
	LorStatusV1GetPlatformDataOperation:                      []string{},
	MatchV5GetMatchOperation:                                 []string{},
	MatchV5GetMatchIdsByPUUIDOperation:                       []string{},
	MatchV5GetTimelineOperation:                              []string{},
	SpectatorTftV5GetCurrentGameInfoByPuuidOperation:         []string{},
	SpectatorTftV5GetFeaturedGamesOperation:                  []string{},
	SpectatorV5GetCurrentGameInfoByPuuidOperation:            []string{},
	SpectatorV5GetFeaturedGamesOperation:                     []string{},
	SummonerV4GetByPUUIDOperation:                            []string{},
	TftLeagueV1GetChallengerLeagueOperation:                  []string{},
	TftLeagueV1GetGrandmasterLeagueOperation:                 []string{},
	TftLeagueV1GetLeagueByIdOperation:                        []string{},
	TftLeagueV1GetLeagueEntriesOperation:                     []string{},
	TftLeagueV1GetLeagueEntriesByPUUIDOperation:              []string{},
	TftLeagueV1GetMasterLeagueOperation:                      []string{},
	TftLeagueV1GetTopRatedLadderOperation:                    []string{},
	TftMatchV1GetMatchOperation:                              []string{},
	TftMatchV1GetMatchIdsByPUUIDOperation:                    []string{},
	TftStatusV1GetPlatformDataOperation:                      []string{},
	TftSummonerV1GetByPUUIDOperation:                         []string{},
	TournamentStubV5CreateTournamentCodeOperation:            []string{},
	TournamentStubV5GetLobbyEventsByCodeOperation:            []string{},
	TournamentStubV5GetTournamentCodeOperation:               []string{},
	TournamentStubV5RegisterProviderDataOperation:            []string{},
	TournamentStubV5RegisterTournamentOperation:              []string{},
	TournamentV5CreateTournamentCodeOperation:                []string{},
	TournamentV5GetGamesOperation:                            []string{},
	TournamentV5GetLobbyEventsByCodeOperation:                []string{},
	TournamentV5GetTournamentCodeOperation:                   []string{},
	TournamentV5RegisterProviderDataOperation:                []string{},
	TournamentV5RegisterTournamentOperation:                  []string{},
	TournamentV5UpdateCodeOperation:                          []string{},
	ValConsoleMatchV1GetMatchOperation:                       []string{},
	ValConsoleMatchV1GetMatchlistOperation:                   []string{},
	ValConsoleMatchV1GetRecentOperation:                      []string{},
	ValConsoleRankedV1GetLeaderboardOperation:                []string{},
	ValContentV1GetContentOperation:                          []string{},
	ValMatchV1GetMatchOperation:                              []string{},
	ValMatchV1GetMatchlistOperation:                          []string{},
	ValMatchV1GetRecentOperation:                             []string{},
	ValRankedV1GetLeaderboardOperation:                       []string{},
	ValStatusV1GetPlatformDataOperation:                      []string{},
}

func (s *Server) securityAPIKey(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t APIKey
	const parameterName = "api_key"
	q := req.URL.Query()
	if !q.Has(parameterName) {
		return ctx, false, nil
	}
	value := q.Get(parameterName)
	t.APIKey = value
	t.Roles = operationRolesAPIKey[operationName]
	rctx, err := s.sec.HandleAPIKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var oauth2ScopesRso = map[string][]string{
	AccountV1GetByAccessTokenOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetMatchOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetMatchIdsOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetTimelineOperation: []string{
		"openid",
	},
	LorDeckV1CreateDeckOperation: []string{
		"openid",
	},
	LorDeckV1GetDecksOperation: []string{
		"openid",
	},
	LorInventoryV1GetCardsOperation: []string{
		"openid",
	},
	SummonerV4GetByAccessTokenOperation: []string{
		"openid",
	},
	TftSummonerV1GetByAccessTokenOperation: []string{
		"openid",
	},
}

func (s *Server) securityRso(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Rso
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Scopes = oauth2ScopesRso[operationName]
	rctx, err := s.sec.HandleRso(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// XRiotToken provides X-Riot-Token security value.
	// API key in header.
	XRiotToken(ctx context.Context, operationName OperationName) (XRiotToken, error)
	// APIKey provides api_key security value.
	// API key in query param.
	APIKey(ctx context.Context, operationName OperationName) (APIKey, error)
	// Rso provides rso security value.
	// Riot Sign-On (RSO).
	Rso(ctx context.Context, operationName OperationName) (Rso, error)
}

func (s *Client) securityXRiotToken(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.XRiotToken(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"XRiotToken\"")
	}
	req.Header.Set("X-Riot-Token", t.APIKey)
	return nil
}
func (s *Client) securityAPIKey(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.APIKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"APIKey\"")
	}
	q := req.URL.Query()
	q.Set("api_key", t.APIKey)
	req.URL.RawQuery = q.Encode()
	return nil
}
func (s *Client) securityRso(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.Rso(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"Rso\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
