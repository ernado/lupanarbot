// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountV1GetActiveRegion implements account-v1.getActiveRegion operation.
	//
	// Get active region (lol and tft).
	//
	// GET /riot/account/v1/region/by-game/{game}/by-puuid/{puuid}
	AccountV1GetActiveRegion(ctx context.Context, params AccountV1GetActiveRegionParams) (AccountV1GetActiveRegionRes, error)
	// AccountV1GetActiveShard implements account-v1.getActiveShard operation.
	//
	// Get active shard for a player.
	//
	// GET /riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}
	AccountV1GetActiveShard(ctx context.Context, params AccountV1GetActiveShardParams) (AccountV1GetActiveShardRes, error)
	// AccountV1GetByAccessToken implements account-v1.getByAccessToken operation.
	//
	// Get account by access token.
	//
	// GET /riot/account/v1/accounts/me
	AccountV1GetByAccessToken(ctx context.Context) (AccountV1GetByAccessTokenRes, error)
	// AccountV1GetByPuuid implements account-v1.getByPuuid operation.
	//
	// Get account by puuid.
	//
	// GET /riot/account/v1/accounts/by-puuid/{puuid}
	AccountV1GetByPuuid(ctx context.Context, params AccountV1GetByPuuidParams) (AccountV1GetByPuuidRes, error)
	// AccountV1GetByRiotId implements account-v1.getByRiotId operation.
	//
	// Get account by riot id.
	//
	// GET /riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}
	AccountV1GetByRiotId(ctx context.Context, params AccountV1GetByRiotIdParams) (AccountV1GetByRiotIdRes, error)
	// ChampionMasteryV4GetAllChampionMasteriesByPUUID implements champion-mastery-v4.getAllChampionMasteriesByPUUID operation.
	//
	// Get all champion mastery entries sorted by number of champion points descending.
	//
	// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}
	ChampionMasteryV4GetAllChampionMasteriesByPUUID(ctx context.Context, params ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams) (ChampionMasteryV4GetAllChampionMasteriesByPUUIDRes, error)
	// ChampionMasteryV4GetChampionMasteryByPUUID implements champion-mastery-v4.getChampionMasteryByPUUID operation.
	//
	// Get a champion mastery by puuid and champion ID.
	//
	// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}
	ChampionMasteryV4GetChampionMasteryByPUUID(ctx context.Context, params ChampionMasteryV4GetChampionMasteryByPUUIDParams) (ChampionMasteryV4GetChampionMasteryByPUUIDRes, error)
	// ChampionMasteryV4GetChampionMasteryScoreByPUUID implements champion-mastery-v4.getChampionMasteryScoreByPUUID operation.
	//
	// Get a player's total champion mastery score, which is the sum of individual champion mastery
	// levels.
	//
	// GET /lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}
	ChampionMasteryV4GetChampionMasteryScoreByPUUID(ctx context.Context, params ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams) (ChampionMasteryV4GetChampionMasteryScoreByPUUIDRes, error)
	// ChampionMasteryV4GetTopChampionMasteriesByPUUID implements champion-mastery-v4.getTopChampionMasteriesByPUUID operation.
	//
	// Get specified number of top champion mastery entries sorted by number of champion points
	// descending.
	//
	// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top
	ChampionMasteryV4GetTopChampionMasteriesByPUUID(ctx context.Context, params ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams) (ChampionMasteryV4GetTopChampionMasteriesByPUUIDRes, error)
	// ChampionV3GetChampionInfo implements champion-v3.getChampionInfo operation.
	//
	// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST).
	//
	// GET /lol/platform/v3/champion-rotations
	ChampionV3GetChampionInfo(ctx context.Context) (ChampionV3GetChampionInfoRes, error)
	// ClashV1GetPlayersByPUUID implements clash-v1.getPlayersByPUUID operation.
	//
	// Get players by puuid
	// ## Implementation Notes
	// This endpoint returns a list of active Clash players for a given PUUID. If a summoner registers
	// for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations
	// would appear in this list.
	//
	// GET /lol/clash/v1/players/by-puuid/{puuid}
	ClashV1GetPlayersByPUUID(ctx context.Context, params ClashV1GetPlayersByPUUIDParams) (ClashV1GetPlayersByPUUIDRes, error)
	// ClashV1GetTeamById implements clash-v1.getTeamById operation.
	//
	// Get team by ID.
	//
	// GET /lol/clash/v1/teams/{teamId}
	ClashV1GetTeamById(ctx context.Context, params ClashV1GetTeamByIdParams) (ClashV1GetTeamByIdRes, error)
	// ClashV1GetTournamentById implements clash-v1.getTournamentById operation.
	//
	// Get tournament by ID.
	//
	// GET /lol/clash/v1/tournaments/{tournamentId}
	ClashV1GetTournamentById(ctx context.Context, params ClashV1GetTournamentByIdParams) (ClashV1GetTournamentByIdRes, error)
	// ClashV1GetTournamentByTeam implements clash-v1.getTournamentByTeam operation.
	//
	// Get tournament by team ID.
	//
	// GET /lol/clash/v1/tournaments/by-team/{teamId}
	ClashV1GetTournamentByTeam(ctx context.Context, params ClashV1GetTournamentByTeamParams) (ClashV1GetTournamentByTeamRes, error)
	// ClashV1GetTournaments implements clash-v1.getTournaments operation.
	//
	// Get all active or upcoming tournaments.
	//
	// GET /lol/clash/v1/tournaments
	ClashV1GetTournaments(ctx context.Context) (ClashV1GetTournamentsRes, error)
	// LeagueExpV4GetLeagueEntries implements league-exp-v4.getLeagueEntries operation.
	//
	// Get all the league entries.
	//
	// GET /lol/league-exp/v4/entries/{queue}/{tier}/{division}
	LeagueExpV4GetLeagueEntries(ctx context.Context, params LeagueExpV4GetLeagueEntriesParams) (LeagueExpV4GetLeagueEntriesRes, error)
	// LeagueV4GetChallengerLeague implements league-v4.getChallengerLeague operation.
	//
	// Get the challenger league for given queue.
	//
	// GET /lol/league/v4/challengerleagues/by-queue/{queue}
	LeagueV4GetChallengerLeague(ctx context.Context, params LeagueV4GetChallengerLeagueParams) (LeagueV4GetChallengerLeagueRes, error)
	// LeagueV4GetGrandmasterLeague implements league-v4.getGrandmasterLeague operation.
	//
	// Get the grandmaster league of a specific queue.
	//
	// GET /lol/league/v4/grandmasterleagues/by-queue/{queue}
	LeagueV4GetGrandmasterLeague(ctx context.Context, params LeagueV4GetGrandmasterLeagueParams) (LeagueV4GetGrandmasterLeagueRes, error)
	// LeagueV4GetLeagueById implements league-v4.getLeagueById operation.
	//
	// Get league with given ID, including inactive entries.
	//
	// GET /lol/league/v4/leagues/{leagueId}
	LeagueV4GetLeagueById(ctx context.Context, params LeagueV4GetLeagueByIdParams) (LeagueV4GetLeagueByIdRes, error)
	// LeagueV4GetLeagueEntries implements league-v4.getLeagueEntries operation.
	//
	// Get all the league entries.
	//
	// GET /lol/league/v4/entries/{queue}/{tier}/{division}
	LeagueV4GetLeagueEntries(ctx context.Context, params LeagueV4GetLeagueEntriesParams) (LeagueV4GetLeagueEntriesRes, error)
	// LeagueV4GetLeagueEntriesByPUUID implements league-v4.getLeagueEntriesByPUUID operation.
	//
	// Get league entries in all queues for a given puuid.
	//
	// GET /lol/league/v4/entries/by-puuid/{encryptedPUUID}
	LeagueV4GetLeagueEntriesByPUUID(ctx context.Context, params LeagueV4GetLeagueEntriesByPUUIDParams) (LeagueV4GetLeagueEntriesByPUUIDRes, error)
	// LeagueV4GetMasterLeague implements league-v4.getMasterLeague operation.
	//
	// Get the master league for given queue.
	//
	// GET /lol/league/v4/masterleagues/by-queue/{queue}
	LeagueV4GetMasterLeague(ctx context.Context, params LeagueV4GetMasterLeagueParams) (LeagueV4GetMasterLeagueRes, error)
	// LolChallengesV1GetAllChallengeConfigs implements lol-challenges-v1.getAllChallengeConfigs operation.
	//
	// List of all basic challenge configuration information (includes all translations for names and
	// descriptions).
	//
	// GET /lol/challenges/v1/challenges/config
	LolChallengesV1GetAllChallengeConfigs(ctx context.Context) (LolChallengesV1GetAllChallengeConfigsRes, error)
	// LolChallengesV1GetAllChallengePercentiles implements lol-challenges-v1.getAllChallengePercentiles operation.
	//
	// Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level
	// -> percentile of players who achieved it.
	//
	// GET /lol/challenges/v1/challenges/percentiles
	LolChallengesV1GetAllChallengePercentiles(ctx context.Context) (LolChallengesV1GetAllChallengePercentilesRes, error)
	// LolChallengesV1GetChallengeConfigs implements lol-challenges-v1.getChallengeConfigs operation.
	//
	// Get challenge configuration (REST).
	//
	// GET /lol/challenges/v1/challenges/{challengeId}/config
	LolChallengesV1GetChallengeConfigs(ctx context.Context, params LolChallengesV1GetChallengeConfigsParams) (LolChallengesV1GetChallengeConfigsRes, error)
	// LolChallengesV1GetChallengeLeaderboards implements lol-challenges-v1.getChallengeLeaderboards operation.
	//
	// Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
	//
	// GET /lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}
	LolChallengesV1GetChallengeLeaderboards(ctx context.Context, params LolChallengesV1GetChallengeLeaderboardsParams) (LolChallengesV1GetChallengeLeaderboardsRes, error)
	// LolChallengesV1GetChallengePercentiles implements lol-challenges-v1.getChallengePercentiles operation.
	//
	// Map of level to percentile of players who have achieved it.
	//
	// GET /lol/challenges/v1/challenges/{challengeId}/percentiles
	LolChallengesV1GetChallengePercentiles(ctx context.Context, params LolChallengesV1GetChallengePercentilesParams) (LolChallengesV1GetChallengePercentilesRes, error)
	// LolChallengesV1GetPlayerData implements lol-challenges-v1.getPlayerData operation.
	//
	// Returns player information with list of all progressed challenges (REST).
	//
	// GET /lol/challenges/v1/player-data/{puuid}
	LolChallengesV1GetPlayerData(ctx context.Context, params LolChallengesV1GetPlayerDataParams) (LolChallengesV1GetPlayerDataRes, error)
	// LolRsoMatchV1GetMatch implements lol-rso-match-v1.getMatch operation.
	//
	// Get a match by match id.
	//
	// GET /lol/rso-match/v1/matches/{matchId}
	LolRsoMatchV1GetMatch(ctx context.Context, params LolRsoMatchV1GetMatchParams) (LolRsoMatchV1GetMatchRes, error)
	// LolRsoMatchV1GetMatchIds implements lol-rso-match-v1.getMatchIds operation.
	//
	// Get a list of match ids by player access token - Includes custom matches.
	//
	// GET /lol/rso-match/v1/matches/ids
	LolRsoMatchV1GetMatchIds(ctx context.Context, params LolRsoMatchV1GetMatchIdsParams) (LolRsoMatchV1GetMatchIdsRes, error)
	// LolRsoMatchV1GetTimeline implements lol-rso-match-v1.getTimeline operation.
	//
	// Get a match timeline by match id.
	//
	// GET /lol/rso-match/v1/matches/{matchId}/timeline
	LolRsoMatchV1GetTimeline(ctx context.Context, params LolRsoMatchV1GetTimelineParams) (LolRsoMatchV1GetTimelineRes, error)
	// LolStatusV4GetPlatformData implements lol-status-v4.getPlatformData operation.
	//
	// Get League of Legends status for the given platform.
	//
	// GET /lol/status/v4/platform-data
	LolStatusV4GetPlatformData(ctx context.Context) (LolStatusV4GetPlatformDataRes, error)
	// LorDeckV1CreateDeck implements lor-deck-v1.createDeck operation.
	//
	// Create a new deck for the calling user.
	//
	// POST /lor/deck/v1/decks/me
	LorDeckV1CreateDeck(ctx context.Context, req *LorDeckV1NewDeckDto) (LorDeckV1CreateDeckRes, error)
	// LorDeckV1GetDecks implements lor-deck-v1.getDecks operation.
	//
	// Get a list of the calling user's decks.
	//
	// GET /lor/deck/v1/decks/me
	LorDeckV1GetDecks(ctx context.Context) (LorDeckV1GetDecksRes, error)
	// LorInventoryV1GetCards implements lor-inventory-v1.getCards operation.
	//
	// Return a list of cards owned by the calling user.
	//
	// GET /lor/inventory/v1/cards/me
	LorInventoryV1GetCards(ctx context.Context) (LorInventoryV1GetCardsRes, error)
	// LorMatchV1GetMatch implements lor-match-v1.getMatch operation.
	//
	// Get match by id.
	//
	// GET /lor/match/v1/matches/{matchId}
	LorMatchV1GetMatch(ctx context.Context, params LorMatchV1GetMatchParams) (LorMatchV1GetMatchRes, error)
	// LorMatchV1GetMatchIdsByPUUID implements lor-match-v1.getMatchIdsByPUUID operation.
	//
	// Get a list of match ids by PUUID.
	//
	// GET /lor/match/v1/matches/by-puuid/{puuid}/ids
	LorMatchV1GetMatchIdsByPUUID(ctx context.Context, params LorMatchV1GetMatchIdsByPUUIDParams) (LorMatchV1GetMatchIdsByPUUIDRes, error)
	// LorRankedV1GetLeaderboards implements lor-ranked-v1.getLeaderboards operation.
	//
	// Get the players in Master tier.
	//
	// GET /lor/ranked/v1/leaderboards
	LorRankedV1GetLeaderboards(ctx context.Context) (LorRankedV1GetLeaderboardsRes, error)
	// LorStatusV1GetPlatformData implements lor-status-v1.getPlatformData operation.
	//
	// Get Legends of Runeterra status for the given platform.
	//
	// GET /lor/status/v1/platform-data
	LorStatusV1GetPlatformData(ctx context.Context) (LorStatusV1GetPlatformDataRes, error)
	// MatchV5GetMatch implements match-v5.getMatch operation.
	//
	// Get a match by match id.
	//
	// GET /lol/match/v5/matches/{matchId}
	MatchV5GetMatch(ctx context.Context, params MatchV5GetMatchParams) (MatchV5GetMatchRes, error)
	// MatchV5GetMatchIdsByPUUID implements match-v5.getMatchIdsByPUUID operation.
	//
	// Get a list of match ids by puuid.
	//
	// GET /lol/match/v5/matches/by-puuid/{puuid}/ids
	MatchV5GetMatchIdsByPUUID(ctx context.Context, params MatchV5GetMatchIdsByPUUIDParams) (MatchV5GetMatchIdsByPUUIDRes, error)
	// MatchV5GetTimeline implements match-v5.getTimeline operation.
	//
	// Get a match timeline by match id.
	//
	// GET /lol/match/v5/matches/{matchId}/timeline
	MatchV5GetTimeline(ctx context.Context, params MatchV5GetTimelineParams) (MatchV5GetTimelineRes, error)
	// SpectatorTftV5GetCurrentGameInfoByPuuid implements spectator-tft-v5.getCurrentGameInfoByPuuid operation.
	//
	// Get current game information for the given puuid.
	//
	// GET /lol/spectator/tft/v5/active-games/by-puuid/{encryptedPUUID}
	SpectatorTftV5GetCurrentGameInfoByPuuid(ctx context.Context, params SpectatorTftV5GetCurrentGameInfoByPuuidParams) (SpectatorTftV5GetCurrentGameInfoByPuuidRes, error)
	// SpectatorTftV5GetFeaturedGames implements spectator-tft-v5.getFeaturedGames operation.
	//
	// Get list of featured games.
	//
	// GET /lol/spectator/tft/v5/featured-games
	SpectatorTftV5GetFeaturedGames(ctx context.Context) (SpectatorTftV5GetFeaturedGamesRes, error)
	// SpectatorV5GetCurrentGameInfoByPuuid implements spectator-v5.getCurrentGameInfoByPuuid operation.
	//
	// Get current game information for the given puuid.
	//
	// GET /lol/spectator/v5/active-games/by-summoner/{encryptedPUUID}
	SpectatorV5GetCurrentGameInfoByPuuid(ctx context.Context, params SpectatorV5GetCurrentGameInfoByPuuidParams) (SpectatorV5GetCurrentGameInfoByPuuidRes, error)
	// SpectatorV5GetFeaturedGames implements spectator-v5.getFeaturedGames operation.
	//
	// Get list of featured games.
	//
	// GET /lol/spectator/v5/featured-games
	SpectatorV5GetFeaturedGames(ctx context.Context) (SpectatorV5GetFeaturedGamesRes, error)
	// SummonerV4GetByAccessToken implements summoner-v4.getByAccessToken operation.
	//
	// Get a summoner by access token.
	//
	// GET /lol/summoner/v4/summoners/me
	SummonerV4GetByAccessToken(ctx context.Context) (SummonerV4GetByAccessTokenRes, error)
	// SummonerV4GetByPUUID implements summoner-v4.getByPUUID operation.
	//
	// Get a summoner by PUUID.
	//
	// GET /lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}
	SummonerV4GetByPUUID(ctx context.Context, params SummonerV4GetByPUUIDParams) (SummonerV4GetByPUUIDRes, error)
	// TftLeagueV1GetChallengerLeague implements tft-league-v1.getChallengerLeague operation.
	//
	// Get the challenger league.
	//
	// GET /tft/league/v1/challenger
	TftLeagueV1GetChallengerLeague(ctx context.Context, params TftLeagueV1GetChallengerLeagueParams) (TftLeagueV1GetChallengerLeagueRes, error)
	// TftLeagueV1GetGrandmasterLeague implements tft-league-v1.getGrandmasterLeague operation.
	//
	// Get the grandmaster league.
	//
	// GET /tft/league/v1/grandmaster
	TftLeagueV1GetGrandmasterLeague(ctx context.Context, params TftLeagueV1GetGrandmasterLeagueParams) (TftLeagueV1GetGrandmasterLeagueRes, error)
	// TftLeagueV1GetLeagueById implements tft-league-v1.getLeagueById operation.
	//
	// Get league with given ID, including inactive entries.
	//
	// GET /tft/league/v1/leagues/{leagueId}
	TftLeagueV1GetLeagueById(ctx context.Context, params TftLeagueV1GetLeagueByIdParams) (TftLeagueV1GetLeagueByIdRes, error)
	// TftLeagueV1GetLeagueEntries implements tft-league-v1.getLeagueEntries operation.
	//
	// Get all the league entries.
	//
	// GET /tft/league/v1/entries/{tier}/{division}
	TftLeagueV1GetLeagueEntries(ctx context.Context, params TftLeagueV1GetLeagueEntriesParams) (TftLeagueV1GetLeagueEntriesRes, error)
	// TftLeagueV1GetLeagueEntriesByPUUID implements tft-league-v1.getLeagueEntriesByPUUID operation.
	//
	// Get league entries in all queues for a given puuid.
	//
	// GET /tft/league/v1/by-puuid/{puuid}
	TftLeagueV1GetLeagueEntriesByPUUID(ctx context.Context, params TftLeagueV1GetLeagueEntriesByPUUIDParams) (TftLeagueV1GetLeagueEntriesByPUUIDRes, error)
	// TftLeagueV1GetMasterLeague implements tft-league-v1.getMasterLeague operation.
	//
	// Get the master league.
	//
	// GET /tft/league/v1/master
	TftLeagueV1GetMasterLeague(ctx context.Context, params TftLeagueV1GetMasterLeagueParams) (TftLeagueV1GetMasterLeagueRes, error)
	// TftLeagueV1GetTopRatedLadder implements tft-league-v1.getTopRatedLadder operation.
	//
	// Get the top rated ladder for given queue.
	//
	// GET /tft/league/v1/rated-ladders/{queue}/top
	TftLeagueV1GetTopRatedLadder(ctx context.Context, params TftLeagueV1GetTopRatedLadderParams) (TftLeagueV1GetTopRatedLadderRes, error)
	// TftMatchV1GetMatch implements tft-match-v1.getMatch operation.
	//
	// Get a match by match id.
	//
	// GET /tft/match/v1/matches/{matchId}
	TftMatchV1GetMatch(ctx context.Context, params TftMatchV1GetMatchParams) (TftMatchV1GetMatchRes, error)
	// TftMatchV1GetMatchIdsByPUUID implements tft-match-v1.getMatchIdsByPUUID operation.
	//
	// Get a list of match ids by PUUID.
	//
	// GET /tft/match/v1/matches/by-puuid/{puuid}/ids
	TftMatchV1GetMatchIdsByPUUID(ctx context.Context, params TftMatchV1GetMatchIdsByPUUIDParams) (TftMatchV1GetMatchIdsByPUUIDRes, error)
	// TftStatusV1GetPlatformData implements tft-status-v1.getPlatformData operation.
	//
	// Get Teamfight Tactics status for the given platform.
	//
	// GET /tft/status/v1/platform-data
	TftStatusV1GetPlatformData(ctx context.Context) (TftStatusV1GetPlatformDataRes, error)
	// TftSummonerV1GetByAccessToken implements tft-summoner-v1.getByAccessToken operation.
	//
	// Get a summoner by access token.
	//
	// GET /tft/summoner/v1/summoners/me
	TftSummonerV1GetByAccessToken(ctx context.Context) (TftSummonerV1GetByAccessTokenRes, error)
	// TftSummonerV1GetByPUUID implements tft-summoner-v1.getByPUUID operation.
	//
	// Get a summoner by PUUID.
	//
	// GET /tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}
	TftSummonerV1GetByPUUID(ctx context.Context, params TftSummonerV1GetByPUUIDParams) (TftSummonerV1GetByPUUIDRes, error)
	// TournamentStubV5CreateTournamentCode implements tournament-stub-v5.createTournamentCode operation.
	//
	// Create a tournament code for the given tournament - Stub method.
	//
	// POST /lol/tournament-stub/v5/codes
	TournamentStubV5CreateTournamentCode(ctx context.Context, req *TournamentStubV5TournamentCodeParametersV5, params TournamentStubV5CreateTournamentCodeParams) (TournamentStubV5CreateTournamentCodeRes, error)
	// TournamentStubV5GetLobbyEventsByCode implements tournament-stub-v5.getLobbyEventsByCode operation.
	//
	// Gets a list of lobby events by tournament code - Stub method.
	//
	// GET /lol/tournament-stub/v5/lobby-events/by-code/{tournamentCode}
	TournamentStubV5GetLobbyEventsByCode(ctx context.Context, params TournamentStubV5GetLobbyEventsByCodeParams) (TournamentStubV5GetLobbyEventsByCodeRes, error)
	// TournamentStubV5GetTournamentCode implements tournament-stub-v5.getTournamentCode operation.
	//
	// Returns the tournament code DTO associated with a tournament code string - Stub Method.
	//
	// GET /lol/tournament-stub/v5/codes/{tournamentCode}
	TournamentStubV5GetTournamentCode(ctx context.Context, params TournamentStubV5GetTournamentCodeParams) (TournamentStubV5GetTournamentCodeRes, error)
	// TournamentStubV5RegisterProviderData implements tournament-stub-v5.registerProviderData operation.
	//
	// Creates a tournament provider and returns its ID - Stub method
	// ## Implementation Notes
	// Providers will need to call this endpoint first to register their callback URL and their API key
	// with the tournament system before any other tournament provider endpoints will work.
	//
	// POST /lol/tournament-stub/v5/providers
	TournamentStubV5RegisterProviderData(ctx context.Context, req *TournamentStubV5ProviderRegistrationParametersV5) (TournamentStubV5RegisterProviderDataRes, error)
	// TournamentStubV5RegisterTournament implements tournament-stub-v5.registerTournament operation.
	//
	// Creates a tournament and returns its ID - Stub method.
	//
	// POST /lol/tournament-stub/v5/tournaments
	TournamentStubV5RegisterTournament(ctx context.Context, req *TournamentStubV5TournamentRegistrationParametersV5) (TournamentStubV5RegisterTournamentRes, error)
	// TournamentV5CreateTournamentCode implements tournament-v5.createTournamentCode operation.
	//
	// Create a tournament code for the given tournament.
	//
	// POST /lol/tournament/v5/codes
	TournamentV5CreateTournamentCode(ctx context.Context, req *TournamentV5TournamentCodeParametersV5, params TournamentV5CreateTournamentCodeParams) (TournamentV5CreateTournamentCodeRes, error)
	// TournamentV5GetGames implements tournament-v5.getGames operation.
	//
	// Get games details
	// ## Implementation Notes
	// Additional endpoint to get tournament games. From this endpoint, you are able to get participants
	// PUUID (the callback doesn't contain this info).
	// You can also use it to check if the game was recorded and validate callbacks. If the endpoint
	// returns the game, it means a callback was attempted.
	// This will only work for tournament codes created after November 10, 2023.
	//
	// GET /lol/tournament/v5/games/by-code/{tournamentCode}
	TournamentV5GetGames(ctx context.Context, params TournamentV5GetGamesParams) (TournamentV5GetGamesRes, error)
	// TournamentV5GetLobbyEventsByCode implements tournament-v5.getLobbyEventsByCode operation.
	//
	// Gets a list of lobby events by tournament code.
	//
	// GET /lol/tournament/v5/lobby-events/by-code/{tournamentCode}
	TournamentV5GetLobbyEventsByCode(ctx context.Context, params TournamentV5GetLobbyEventsByCodeParams) (TournamentV5GetLobbyEventsByCodeRes, error)
	// TournamentV5GetTournamentCode implements tournament-v5.getTournamentCode operation.
	//
	// Returns the tournament code DTO associated with a tournament code string.
	//
	// GET /lol/tournament/v5/codes/{tournamentCode}
	TournamentV5GetTournamentCode(ctx context.Context, params TournamentV5GetTournamentCodeParams) (TournamentV5GetTournamentCodeRes, error)
	// TournamentV5RegisterProviderData implements tournament-v5.registerProviderData operation.
	//
	// Creates a tournament provider and returns its ID.
	// ## Implementation Notes
	// Providers will need to call this endpoint first to register their callback URL and their API key
	// with the tournament system before any other tournament provider endpoints will work.
	//
	// POST /lol/tournament/v5/providers
	TournamentV5RegisterProviderData(ctx context.Context, req *TournamentV5ProviderRegistrationParametersV5) (TournamentV5RegisterProviderDataRes, error)
	// TournamentV5RegisterTournament implements tournament-v5.registerTournament operation.
	//
	// Creates a tournament and returns its ID.
	//
	// POST /lol/tournament/v5/tournaments
	TournamentV5RegisterTournament(ctx context.Context, req *TournamentV5TournamentRegistrationParametersV5) (TournamentV5RegisterTournamentRes, error)
	// TournamentV5UpdateCode implements tournament-v5.updateCode operation.
	//
	// Update the pick type, map, spectator type, or allowed puuids for a code.
	//
	// PUT /lol/tournament/v5/codes/{tournamentCode}
	TournamentV5UpdateCode(ctx context.Context, req OptTournamentV5TournamentCodeUpdateParametersV5, params TournamentV5UpdateCodeParams) (TournamentV5UpdateCodeRes, error)
	// ValConsoleMatchV1GetMatch implements val-console-match-v1.getMatch operation.
	//
	// Get match by id.
	//
	// GET /val/match/console/v1/matches/{matchId}
	ValConsoleMatchV1GetMatch(ctx context.Context, params ValConsoleMatchV1GetMatchParams) (ValConsoleMatchV1GetMatchRes, error)
	// ValConsoleMatchV1GetMatchlist implements val-console-match-v1.getMatchlist operation.
	//
	// Get matchlist for games played by puuid and platform type.
	//
	// GET /val/match/console/v1/matchlists/by-puuid/{puuid}
	ValConsoleMatchV1GetMatchlist(ctx context.Context, params ValConsoleMatchV1GetMatchlistParams) (ValConsoleMatchV1GetMatchlistRes, error)
	// ValConsoleMatchV1GetRecent implements val-console-match-v1.getRecent operation.
	//
	// Get recent matches
	// ## Implementation Notes
	// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12
	// hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent
	// matches will return a combined list of matches from those three regions. Requests are load
	// balanced so you may see some inconsistencies as matches are added/removed from the list.
	//
	// GET /val/match/console/v1/recent-matches/by-queue/{queue}
	ValConsoleMatchV1GetRecent(ctx context.Context, params ValConsoleMatchV1GetRecentParams) (ValConsoleMatchV1GetRecentRes, error)
	// ValConsoleRankedV1GetLeaderboard implements val-console-ranked-v1.getLeaderboard operation.
	//
	// Get leaderboard for the competitive queue.
	//
	// GET /val/console/ranked/v1/leaderboards/by-act/{actId}
	ValConsoleRankedV1GetLeaderboard(ctx context.Context, params ValConsoleRankedV1GetLeaderboardParams) (ValConsoleRankedV1GetLeaderboardRes, error)
	// ValContentV1GetContent implements val-content-v1.getContent operation.
	//
	// Get content optionally filtered by locale.
	//
	// GET /val/content/v1/contents
	ValContentV1GetContent(ctx context.Context, params ValContentV1GetContentParams) (ValContentV1GetContentRes, error)
	// ValMatchV1GetMatch implements val-match-v1.getMatch operation.
	//
	// Get match by id.
	//
	// GET /val/match/v1/matches/{matchId}
	ValMatchV1GetMatch(ctx context.Context, params ValMatchV1GetMatchParams) (ValMatchV1GetMatchRes, error)
	// ValMatchV1GetMatchlist implements val-match-v1.getMatchlist operation.
	//
	// Get matchlist for games played by puuid.
	//
	// GET /val/match/v1/matchlists/by-puuid/{puuid}
	ValMatchV1GetMatchlist(ctx context.Context, params ValMatchV1GetMatchlistParams) (ValMatchV1GetMatchlistRes, error)
	// ValMatchV1GetRecent implements val-match-v1.getRecent operation.
	//
	// Get recent matches
	// ## Implementation Notes
	// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12
	// hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent
	// matches will return a combined list of matches from those three regions. Requests are load
	// balanced so you may see some inconsistencies as matches are added/removed from the list.
	//
	// GET /val/match/v1/recent-matches/by-queue/{queue}
	ValMatchV1GetRecent(ctx context.Context, params ValMatchV1GetRecentParams) (ValMatchV1GetRecentRes, error)
	// ValRankedV1GetLeaderboard implements val-ranked-v1.getLeaderboard operation.
	//
	// Get leaderboard for the competitive queue.
	//
	// GET /val/ranked/v1/leaderboards/by-act/{actId}
	ValRankedV1GetLeaderboard(ctx context.Context, params ValRankedV1GetLeaderboardParams) (ValRankedV1GetLeaderboardRes, error)
	// ValStatusV1GetPlatformData implements val-status-v1.getPlatformData operation.
	//
	// Get VALORANT status for the given platform.
	//
	// GET /val/status/v1/platform-data
	ValStatusV1GetPlatformData(ctx context.Context) (ValStatusV1GetPlatformDataRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
