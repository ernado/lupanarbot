// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s AccountV1GetActiveRegionGame) Validate() error {
	switch s {
	case "lol":
		return nil
	case "tft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountV1GetActiveShardGame) Validate() error {
	switch s {
	case "val":
		return nil
	case "lor":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChampionMasteryV4GetAllChampionMasteriesByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]ChampionMasteryV4ChampionMasteryDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ChampionMasteryV4GetTopChampionMasteriesByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]ChampionMasteryV4ChampionMasteryDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *ChampionV3ChampionInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.FreeChampionIdsForNewPlayers == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "freeChampionIdsForNewPlayers",
			Error: err,
		})
	}
	if err := func() error {
		if s.FreeChampionIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "freeChampionIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ClashV1GetPlayersByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]ClashV1PlayerDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ClashV1GetTournamentsOKApplicationJSON) Validate() error {
	alias := ([]ClashV1TournamentDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ClashV1PlayerDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Position.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "position",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ClashV1PlayerDtoPosition) Validate() error {
	switch s {
	case "UNSELECTED":
		return nil
	case "FILL":
		return nil
	case "TOP":
		return nil
	case "JUNGLE":
		return nil
	case "MIDDLE":
		return nil
	case "BOTTOM":
		return nil
	case "UTILITY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ClashV1PlayerDtoRole) Validate() error {
	switch s {
	case "CAPTAIN":
		return nil
	case "MEMBER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ClashV1TeamDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Players {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ClashV1TournamentDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Schedule == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schedule",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LeagueExpV4GetLeagueEntriesDivision) Validate() error {
	switch s {
	case "I":
		return nil
	case "II":
		return nil
	case "III":
		return nil
	case "IV":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueExpV4GetLeagueEntriesOKApplicationJSON) Validate() error {
	alias := ([]LeagueExpV4LeagueEntryDTO)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LeagueExpV4GetLeagueEntriesQueue) Validate() error {
	switch s {
	case "RANKED_SOLO_5x5":
		return nil
	case "RANKED_TFT":
		return nil
	case "RANKED_FLEX_SR":
		return nil
	case "RANKED_FLEX_TT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueExpV4GetLeagueEntriesTier) Validate() error {
	switch s {
	case "CHALLENGER":
		return nil
	case "GRANDMASTER":
		return nil
	case "MASTER":
		return nil
	case "DIAMOND":
		return nil
	case "EMERALD":
		return nil
	case "PLATINUM":
		return nil
	case "GOLD":
		return nil
	case "SILVER":
		return nil
	case "BRONZE":
		return nil
	case "IRON":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetChallengerLeagueQueue) Validate() error {
	switch s {
	case "RANKED_SOLO_5x5":
		return nil
	case "RANKED_FLEX_SR":
		return nil
	case "RANKED_FLEX_TT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetGrandmasterLeagueQueue) Validate() error {
	switch s {
	case "RANKED_SOLO_5x5":
		return nil
	case "RANKED_FLEX_SR":
		return nil
	case "RANKED_FLEX_TT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetLeagueEntriesByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]LeagueV4LeagueEntryDTO)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LeagueV4GetLeagueEntriesDivision) Validate() error {
	switch s {
	case "I":
		return nil
	case "II":
		return nil
	case "III":
		return nil
	case "IV":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetLeagueEntriesOKApplicationJSON) Validate() error {
	alias := ([]LeagueV4LeagueEntryDTO)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LeagueV4GetLeagueEntriesQueue) Validate() error {
	switch s {
	case "RANKED_SOLO_5x5":
		return nil
	case "RANKED_FLEX_SR":
		return nil
	case "RANKED_FLEX_TT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetLeagueEntriesTier) Validate() error {
	switch s {
	case "DIAMOND":
		return nil
	case "EMERALD":
		return nil
	case "PLATINUM":
		return nil
	case "GOLD":
		return nil
	case "SILVER":
		return nil
	case "BRONZE":
		return nil
	case "IRON":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LeagueV4GetMasterLeagueQueue) Validate() error {
	switch s {
	case "RANKED_SOLO_5x5":
		return nil
	case "RANKED_FLEX_SR":
		return nil
	case "RANKED_FLEX_TT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LeagueV4LeagueListDTO) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Entries == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "entries",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LolChallengesV1ApexPlayerInfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Value)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LolChallengesV1ChallengeConfigInfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tracking.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tracking",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Thresholds.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "thresholds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1ChallengeConfigInfoDtoState) Validate() error {
	switch s {
	case "DISABLED":
		return nil
	case "HIDDEN":
		return nil
	case "ENABLED":
		return nil
	case "ARCHIVED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LolChallengesV1ChallengeConfigInfoDtoThresholds) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := (validate.Float{}).Validate(float64(elem)); err != nil {
				return errors.Wrap(err, "float")
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1ChallengeConfigInfoDtoTracking) Validate() error {
	switch s {
	case "LIFETIME":
		return nil
	case "SEASON":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LolChallengesV1ChallengeInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Percentile)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "percentile",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Value)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LolChallengesV1ChallengePoints) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Percentile.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "percentile",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1GetAllChallengeConfigsOKApplicationJSON) Validate() error {
	alias := ([]LolChallengesV1ChallengeConfigInfoDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1GetAllChallengePercentilesOK) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1GetAllChallengePercentilesOKItem) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := (validate.Float{}).Validate(float64(elem)); err != nil {
				return errors.Wrap(err, "float")
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1GetChallengeLeaderboardsLevel) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "IRON":
		return nil
	case "BRONZE":
		return nil
	case "SILVER":
		return nil
	case "GOLD":
		return nil
	case "PLATINUM":
		return nil
	case "DIAMOND":
		return nil
	case "MASTER":
		return nil
	case "GRANDMASTER":
		return nil
	case "CHALLENGER":
		return nil
	case "HIGHEST_NOT_LEADERBOARD_ONLY":
		return nil
	case "HIGHEST":
		return nil
	case "LOWEST":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LolChallengesV1GetChallengeLeaderboardsOKApplicationJSON) Validate() error {
	alias := ([]LolChallengesV1ApexPlayerInfoDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1GetChallengePercentilesOK) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := (validate.Float{}).Validate(float64(elem)); err != nil {
				return errors.Wrap(err, "float")
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LolChallengesV1PlayerInfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Challenges == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Challenges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "challenges",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.TotalPoints.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "totalPoints",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.CategoryPoints.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "categoryPoints",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolChallengesV1PlayerInfoDtoCategoryPoints) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolRsoMatchV1GetMatchIdsOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LolRsoMatchV1GetMatchIdsType) Validate() error {
	switch s {
	case "ranked":
		return nil
	case "normal":
		return nil
	case "tourney":
		return nil
	case "tutorial":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LolStatusV4PlatformDataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locales == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locales",
			Error: err,
		})
	}
	if err := func() error {
		if s.Maintenances == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Maintenances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenances",
			Error: err,
		})
	}
	if err := func() error {
		if s.Incidents == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Incidents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incidents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LolStatusV4StatusDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MaintenanceStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenance_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IncidentSeverity.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incident_severity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Titles == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "titles",
			Error: err,
		})
	}
	if err := func() error {
		if s.Updates == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Updates {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "updates",
			Error: err,
		})
	}
	if err := func() error {
		if s.Platforms == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Platforms {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platforms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolStatusV4StatusDtoIncidentSeverity) Validate() error {
	switch s {
	case "info":
		return nil
	case "warning":
		return nil
	case "critical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LolStatusV4StatusDtoMaintenanceStatus) Validate() error {
	switch s {
	case "scheduled":
		return nil
	case "in_progress":
		return nil
	case "complete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LolStatusV4StatusDtoPlatformsItem) Validate() error {
	switch s {
	case "windows":
		return nil
	case "macos":
		return nil
	case "android":
		return nil
	case "ios":
		return nil
	case "ps4":
		return nil
	case "xbone":
		return nil
	case "switch":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LolStatusV4UpdateDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PublishLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PublishLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publish_locations",
			Error: err,
		})
	}
	if err := func() error {
		if s.Translations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "translations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LolStatusV4UpdateDtoPublishLocationsItem) Validate() error {
	switch s {
	case "riotclient":
		return nil
	case "riotstatus":
		return nil
	case "game":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LorDeckV1GetDecksOKApplicationJSON) Validate() error {
	alias := ([]LorDeckV1DeckDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LorInventoryV1GetCardsOKApplicationJSON) Validate() error {
	alias := ([]LorInventoryV1CardDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s LorMatchV1GetMatchIdsByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *LorMatchV1InfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.GameMode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "game_mode",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.GameType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "game_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.GameFormat.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "game_format",
			Error: err,
		})
	}
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Players {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LorMatchV1InfoDtoGameFormat) Validate() error {
	switch s {
	case "standard":
		return nil
	case "eternal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LorMatchV1InfoDtoGameMode) Validate() error {
	switch s {
	case "Constructed":
		return nil
	case "Expeditions":
		return nil
	case "Tutorial":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LorMatchV1InfoDtoGameType) Validate() error {
	switch s {
	case "Ranked":
		return nil
	case "Normal":
		return nil
	case "AI":
		return nil
	case "Tutorial":
		return nil
	case "VanillaTrial":
		return nil
	case "Singleton":
		return nil
	case "StandardGauntlet":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LorMatchV1MatchDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Metadata.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Info.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LorMatchV1MetadataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LorMatchV1PlayerDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Factions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "factions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LorRankedV1LeaderboardDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LorStatusV1PlatformDataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locales == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locales",
			Error: err,
		})
	}
	if err := func() error {
		if s.Maintenances == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Maintenances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenances",
			Error: err,
		})
	}
	if err := func() error {
		if s.Incidents == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Incidents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incidents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LorStatusV1StatusDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MaintenanceStatus.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenance_status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.IncidentSeverity.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incident_severity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Titles == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "titles",
			Error: err,
		})
	}
	if err := func() error {
		if s.Updates == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Updates {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "updates",
			Error: err,
		})
	}
	if err := func() error {
		if s.Platforms == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Platforms {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platforms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LorStatusV1StatusDtoIncidentSeverity) Validate() error {
	switch s {
	case "info":
		return nil
	case "warning":
		return nil
	case "critical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LorStatusV1StatusDtoMaintenanceStatus) Validate() error {
	switch s {
	case "scheduled":
		return nil
	case "in_progress":
		return nil
	case "complete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LorStatusV1StatusDtoPlatformsItem) Validate() error {
	switch s {
	case "windows":
		return nil
	case "macos":
		return nil
	case "android":
		return nil
	case "ios":
		return nil
	case "ps4":
		return nil
	case "xbone":
		return nil
	case "switch":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *LorStatusV1UpdateDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PublishLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PublishLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publish_locations",
			Error: err,
		})
	}
	if err := func() error {
		if s.Translations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "translations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s LorStatusV1UpdateDtoPublishLocationsItem) Validate() error {
	switch s {
	case "riotclient":
		return nil
	case "riotstatus":
		return nil
	case "game":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *MatchV5ChallengesDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ControlWardTimeCoverageInRiverOrEnemyHalf.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "controlWardTimeCoverageInRiverOrEnemyHalf",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EarliestBaron.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "earliestBaron",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EarliestDragonTakedown.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "earliestDragonTakedown",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EarliestElderDragon.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "earliestElderDragon",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EarlyLaningPhaseGoldExpAdvantage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "earlyLaningPhaseGoldExpAdvantage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FasterSupportQuestCompletion.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fasterSupportQuestCompletion",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FastestLegendary.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fastestLegendary",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HadAfkTeammate.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hadAfkTeammate",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HighestCrowdControlScore.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "highestCrowdControlScore",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HighestWardKills.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "highestWardKills",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LaningPhaseGoldExpAdvantage.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "laningPhaseGoldExpAdvantage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxCsAdvantageOnLaneOpponent.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maxCsAdvantageOnLaneOpponent",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayedChampSelectPosition.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playedChampSelectPosition",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ThirdInhibitorDestroyedTime.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "thirdInhibitorDestroyedTime",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VisionScoreAdvantageLaneOpponent.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visionScoreAdvantageLaneOpponent",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AlliedJungleMonsterKills.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "alliedJungleMonsterKills",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BountyGold.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bountyGold",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DamagePerMinute.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "damagePerMinute",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DamageTakenOnTeamPercentage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "damageTakenOnTeamPercentage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EffectiveHealAndShielding.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "effectiveHealAndShielding",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EnemyJungleMonsterKills.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enemyJungleMonsterKills",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FirstTurretKilled.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "firstTurretKilled",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FirstTurretKilledTime.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "firstTurretKilledTime",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GameLength.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameLength",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GoldPerMinute.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "goldPerMinute",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JungleCsBefore10Minutes.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jungleCsBefore10Minutes",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Kda.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kda",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KillParticipation.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "killParticipation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MoreEnemyJungleThanOpponent.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "moreEnemyJungleThanOpponent",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShortestTimeToAceFromFirstTakedown.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shortestTimeToAceFromFirstTakedown",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SWARMPickupGold.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SWARM_PickupGold",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TeamDamagePercentage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teamDamagePercentage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VisionScorePerMinute.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visionScorePerMinute",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HealFromMapSources.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "HealFromMapSources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s MatchV5ChallengesDtoFasterSupportQuestCompletion) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s MatchV5ChallengesDtoHadAfkTeammate) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s MatchV5ChallengesDtoHighestCrowdControlScore) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s MatchV5ChallengesDtoHighestWardKills) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s MatchV5ChallengesDtoLaningPhaseGoldExpAdvantage) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s MatchV5ChallengesDtoPlayedChampSelectPosition) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *MatchV5FramesTimeLineDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s MatchV5GetMatchIdsByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s MatchV5GetMatchIdsByPUUIDType) Validate() error {
	switch s {
	case "ranked":
		return nil
	case "normal":
		return nil
	case "tourney":
		return nil
	case "tutorial":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *MatchV5InfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Teams {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5InfoTimeLineDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Frames == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Frames {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frames",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5MatchDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Metadata.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Info.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5MetadataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5MetadataTimeLineDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5MissionsDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlayerScore0.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore0",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore1.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore2.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore3.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore4.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore4",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore5.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore5",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore6.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore6",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore7.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore7",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore8.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore8",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore9.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore9",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore10.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore10",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore11.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore11",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5ParticipantDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Challenges.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "challenges",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Missions.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "missions",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore0.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore0",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore1.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore2.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore3.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore4.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore4",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore5.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore5",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore6.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore6",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore7.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore7",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore8.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore8",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore9.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore9",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore10.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore10",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlayerScore11.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerScore11",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Perks.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5PerkStyleDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Selections == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selections",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5PerksDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Styles == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Styles {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "styles",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5TeamDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Bans == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bans",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MatchV5TimelineDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Metadata.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Info.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorTftV5CurrentGameInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.BannedChampions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bannedChampions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorTftV5CurrentGameParticipant) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Perks.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perks",
			Error: err,
		})
	}
	if err := func() error {
		if s.GameCustomizationObjects == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameCustomizationObjects",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorTftV5FeaturedGameInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.GameMode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameMode",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.GameType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameType",
			Error: err,
		})
	}
	if err := func() error {
		if s.BannedChampions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bannedChampions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SpectatorTftV5FeaturedGameInfoGameMode) Validate() error {
	switch s {
	case "TFT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SpectatorTftV5FeaturedGameInfoGameType) Validate() error {
	switch s {
	case "MATCHED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SpectatorTftV5FeaturedGames) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.GameList == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.GameList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameList",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorTftV5Perks) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PerkIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perkIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorV5CurrentGameInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.BannedChampions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bannedChampions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorV5CurrentGameParticipant) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Perks.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perks",
			Error: err,
		})
	}
	if err := func() error {
		if s.GameCustomizationObjects == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameCustomizationObjects",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorV5FeaturedGameInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.GameMode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameMode",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.GameType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameType",
			Error: err,
		})
	}
	if err := func() error {
		if s.BannedChampions == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bannedChampions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SpectatorV5FeaturedGameInfoGameMode) Validate() error {
	switch s {
	case "CLASSIC":
		return nil
	case "ODIN":
		return nil
	case "ARAM":
		return nil
	case "TUTORIAL":
		return nil
	case "ONEFORALL":
		return nil
	case "ASCENSION":
		return nil
	case "FIRSTBLOOD":
		return nil
	case "KINGPORO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SpectatorV5FeaturedGameInfoGameType) Validate() error {
	switch s {
	case "CUSTOM_GAME":
		return nil
	case "MATCHED_GAME":
		return nil
	case "TUTORIAL_GAME":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SpectatorV5FeaturedGames) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.GameList == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.GameList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameList",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SpectatorV5Perks) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PerkIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perkIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1GetChallengerLeagueQueue) Validate() error {
	switch s {
	case "RANKED_TFT":
		return nil
	case "RANKED_TFT_DOUBLE_UP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetGrandmasterLeagueQueue) Validate() error {
	switch s {
	case "RANKED_TFT":
		return nil
	case "RANKED_TFT_DOUBLE_UP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetLeagueEntriesByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]TftLeagueV1LeagueEntryDTO)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1GetLeagueEntriesDivision) Validate() error {
	switch s {
	case "I":
		return nil
	case "II":
		return nil
	case "III":
		return nil
	case "IV":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetLeagueEntriesOKApplicationJSON) Validate() error {
	alias := ([]TftLeagueV1LeagueEntryDTO)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1GetLeagueEntriesQueue) Validate() error {
	switch s {
	case "RANKED_TFT":
		return nil
	case "RANKED_TFT_DOUBLE_UP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetLeagueEntriesTier) Validate() error {
	switch s {
	case "DIAMOND":
		return nil
	case "EMERALD":
		return nil
	case "PLATINUM":
		return nil
	case "GOLD":
		return nil
	case "SILVER":
		return nil
	case "BRONZE":
		return nil
	case "IRON":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetMasterLeagueQueue) Validate() error {
	switch s {
	case "RANKED_TFT":
		return nil
	case "RANKED_TFT_DOUBLE_UP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftLeagueV1GetTopRatedLadderOKApplicationJSON) Validate() error {
	alias := ([]TftLeagueV1TopRatedLadderEntryDto)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1GetTopRatedLadderQueue) Validate() error {
	switch s {
	case "RANKED_TFT_TURBO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TftLeagueV1LeagueEntryDTO) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RatedTier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ratedTier",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1LeagueEntryDTORatedTier) Validate() error {
	switch s {
	case "ORANGE":
		return nil
	case "PURPLE":
		return nil
	case "BLUE":
		return nil
	case "GREEN":
		return nil
	case "GRAY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TftLeagueV1LeagueListDTO) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Entries == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "entries",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftLeagueV1TopRatedLadderEntryDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.RatedTier.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ratedTier",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftLeagueV1TopRatedLadderEntryDtoRatedTier) Validate() error {
	switch s {
	case "ORANGE":
		return nil
	case "PURPLE":
		return nil
	case "BLUE":
		return nil
	case "GREEN":
		return nil
	case "GRAY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftMatchV1GetMatchIdsByPUUIDOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *TftMatchV1InfoDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.GameLength)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "game_length",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Participants {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftMatchV1MatchDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Metadata.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Info.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftMatchV1MetadataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftMatchV1ParticipantDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TimeEliminated)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "time_eliminated",
			Error: err,
		})
	}
	if err := func() error {
		if s.Traits == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "traits",
			Error: err,
		})
	}
	if err := func() error {
		if s.Units == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "units",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftStatusV1PlatformDataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locales == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locales",
			Error: err,
		})
	}
	if err := func() error {
		if s.Maintenances == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Maintenances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenances",
			Error: err,
		})
	}
	if err := func() error {
		if s.Incidents == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Incidents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incidents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TftStatusV1StatusDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MaintenanceStatus.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenance_status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.IncidentSeverity.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incident_severity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Titles == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "titles",
			Error: err,
		})
	}
	if err := func() error {
		if s.Updates == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Updates {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "updates",
			Error: err,
		})
	}
	if err := func() error {
		if s.Platforms == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Platforms {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platforms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftStatusV1StatusDtoIncidentSeverity) Validate() error {
	switch s {
	case "info":
		return nil
	case "warning":
		return nil
	case "critical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftStatusV1StatusDtoMaintenanceStatus) Validate() error {
	switch s {
	case "scheduled":
		return nil
	case "in_progress":
		return nil
	case "complete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TftStatusV1StatusDtoPlatformsItem) Validate() error {
	switch s {
	case "windows":
		return nil
	case "macos":
		return nil
	case "android":
		return nil
	case "ios":
		return nil
	case "ps4":
		return nil
	case "xbone":
		return nil
	case "switch":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TftStatusV1UpdateDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PublishLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PublishLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publish_locations",
			Error: err,
		})
	}
	if err := func() error {
		if s.Translations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "translations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TftStatusV1UpdateDtoPublishLocationsItem) Validate() error {
	switch s {
	case "riotclient":
		return nil
	case "riotstatus":
		return nil
	case "game":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentStubV5CreateTournamentCodeOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *TournamentStubV5LobbyEventV5DTOWrapper) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.EventList == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "eventList",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TournamentStubV5ProviderRegistrationParametersV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentStubV5ProviderRegistrationParametersV5Region) Validate() error {
	switch s {
	case "BR":
		return nil
	case "EUNE":
		return nil
	case "EUW":
		return nil
	case "JP":
		return nil
	case "LAN":
		return nil
	case "LAS":
		return nil
	case "NA":
		return nil
	case "OCE":
		return nil
	case "PBE":
		return nil
	case "RU":
		return nil
	case "TR":
		return nil
	case "KR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentStubV5TournamentCodeParametersV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           5,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.TeamSize)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teamSize",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PickType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pickType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MapType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mapType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.SpectatorType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spectatorType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentStubV5TournamentCodeParametersV5MapType) Validate() error {
	switch s {
	case "SUMMONERS_RIFT":
		return nil
	case "HOWLING_ABYSS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentStubV5TournamentCodeParametersV5PickType) Validate() error {
	switch s {
	case "BLIND_PICK":
		return nil
	case "DRAFT_MODE":
		return nil
	case "ALL_RANDOM":
		return nil
	case "TOURNAMENT_DRAFT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentStubV5TournamentCodeParametersV5SpectatorType) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "LOBBYONLY":
		return nil
	case "ALL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentStubV5TournamentCodeV5DTO) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentStubV5TournamentCodeV5DTORegion) Validate() error {
	switch s {
	case "BR":
		return nil
	case "EUNE":
		return nil
	case "EUW":
		return nil
	case "JP":
		return nil
	case "LAN":
		return nil
	case "LAS":
		return nil
	case "NA":
		return nil
	case "OCE":
		return nil
	case "PBE":
		return nil
	case "RU":
		return nil
	case "TR":
		return nil
	case "KR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentV5CreateTournamentCodeOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s TournamentV5GetGamesOKApplicationJSON) Validate() error {
	alias := ([]TournamentV5TournamentGamesV5)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TournamentV5LobbyEventV5DTOWrapper) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.EventList == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "eventList",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TournamentV5ProviderRegistrationParametersV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentV5ProviderRegistrationParametersV5Region) Validate() error {
	switch s {
	case "BR":
		return nil
	case "EUNE":
		return nil
	case "EUW":
		return nil
	case "JP":
		return nil
	case "LAN":
		return nil
	case "LAS":
		return nil
	case "NA":
		return nil
	case "OCE":
		return nil
	case "PBE":
		return nil
	case "RU":
		return nil
	case "TR":
		return nil
	case "KR":
		return nil
	case "PH":
		return nil
	case "SG":
		return nil
	case "TH":
		return nil
	case "TW":
		return nil
	case "VN":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentV5TournamentCodeParametersV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           5,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.TeamSize)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teamSize",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PickType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pickType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MapType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mapType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.SpectatorType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spectatorType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentV5TournamentCodeParametersV5MapType) Validate() error {
	switch s {
	case "SUMMONERS_RIFT":
		return nil
	case "HOWLING_ABYSS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentV5TournamentCodeParametersV5PickType) Validate() error {
	switch s {
	case "BLIND_PICK":
		return nil
	case "DRAFT_MODE":
		return nil
	case "ALL_RANDOM":
		return nil
	case "TOURNAMENT_DRAFT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentV5TournamentCodeParametersV5SpectatorType) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "LOBBYONLY":
		return nil
	case "ALL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentV5TournamentCodeUpdateParametersV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PickType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pickType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MapType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mapType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.SpectatorType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "spectatorType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentV5TournamentCodeUpdateParametersV5MapType) Validate() error {
	switch s {
	case "SUMMONERS_RIFT":
		return nil
	case "HOWLING_ABYSS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentV5TournamentCodeUpdateParametersV5PickType) Validate() error {
	switch s {
	case "BLIND_PICK":
		return nil
	case "DRAFT_MODE":
		return nil
	case "ALL_RANDOM":
		return nil
	case "TOURNAMENT_DRAFT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TournamentV5TournamentCodeUpdateParametersV5SpectatorType) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "LOBBYONLY":
		return nil
	case "ALL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentV5TournamentCodeV5DTO) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if err := func() error {
		if s.Participants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "participants",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TournamentV5TournamentCodeV5DTORegion) Validate() error {
	switch s {
	case "BR":
		return nil
	case "EUNE":
		return nil
	case "EUW":
		return nil
	case "JP":
		return nil
	case "LAN":
		return nil
	case "LAS":
		return nil
	case "NA":
		return nil
	case "OCE":
		return nil
	case "PBE":
		return nil
	case "RU":
		return nil
	case "TR":
		return nil
	case "KR":
		return nil
	case "PH":
		return nil
	case "SG":
		return nil
	case "TH":
		return nil
	case "TW":
		return nil
	case "VN":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TournamentV5TournamentGamesV5) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.WinningTeam == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "winningTeam",
			Error: err,
		})
	}
	if err := func() error {
		if s.LosingTeam == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "losingTeam",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValConsoleMatchV1GetMatchlistPlatformType) Validate() error {
	switch s {
	case "playstation":
		return nil
	case "xbox":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ValConsoleMatchV1GetRecentQueue) Validate() error {
	switch s {
	case "console_unrated":
		return nil
	case "console_swiftplay":
		return nil
	case "console_hurm":
		return nil
	case "console_deathmatch":
		return nil
	case "console_competitive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ValConsoleMatchV1KillDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Assistants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assistants",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerLocations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1MatchDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if err := func() error {
		if s.Coaches == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coaches",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.RoundResults {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundResults",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1MatchlistDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.History == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "history",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1PlayerLocationsDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ViewRadians)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "viewRadians",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1PlayerRoundStatsDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Kills == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Kills {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kills",
			Error: err,
		})
	}
	if err := func() error {
		if s.Damage == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "damage",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1RecentMatchesDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.MatchIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "matchIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValConsoleMatchV1RoundResultDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlantPlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plantPlayerLocations",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DefusePlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "defusePlayerLocations",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerStats == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PlayerStats {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerStats",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValConsoleRankedV1GetLeaderboardPlatformType) Validate() error {
	switch s {
	case "playstation":
		return nil
	case "xbox":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ValConsoleRankedV1LeaderboardDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValContentV1ContentDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Characters == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "characters",
			Error: err,
		})
	}
	if err := func() error {
		if s.Maps == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maps",
			Error: err,
		})
	}
	if err := func() error {
		if s.Chromas == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "chromas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Skins == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "skins",
			Error: err,
		})
	}
	if err := func() error {
		if s.SkinLevels == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "skinLevels",
			Error: err,
		})
	}
	if err := func() error {
		if s.Equips == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "equips",
			Error: err,
		})
	}
	if err := func() error {
		if s.GameModes == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gameModes",
			Error: err,
		})
	}
	if err := func() error {
		if s.Sprays == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sprays",
			Error: err,
		})
	}
	if err := func() error {
		if s.SprayLevels == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sprayLevels",
			Error: err,
		})
	}
	if err := func() error {
		if s.Charms == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "charms",
			Error: err,
		})
	}
	if err := func() error {
		if s.CharmLevels == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "charmLevels",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerCards == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerCards",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerTitles == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerTitles",
			Error: err,
		})
	}
	if err := func() error {
		if s.Acts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "acts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValMatchV1GetRecentQueue) Validate() error {
	switch s {
	case "competitive":
		return nil
	case "unrated":
		return nil
	case "spikerush":
		return nil
	case "tournamentmode":
		return nil
	case "deathmatch":
		return nil
	case "onefa":
		return nil
	case "ggteam":
		return nil
	case "hurm":
		return nil
	case "swiftplay":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ValMatchV1KillDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Assistants == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assistants",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerLocations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1MatchDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if err := func() error {
		if s.Coaches == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coaches",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.RoundResults {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundResults",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1MatchlistDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.History == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "history",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1PlayerLocationsDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ViewRadians)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "viewRadians",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1PlayerRoundStatsDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Kills == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Kills {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kills",
			Error: err,
		})
	}
	if err := func() error {
		if s.Damage == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "damage",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1RecentMatchesDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.MatchIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "matchIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValMatchV1RoundResultDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlantPlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plantPlayerLocations",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DefusePlayerLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "defusePlayerLocations",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlayerStats == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PlayerStats {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "playerStats",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValRankedV1LeaderboardDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Players == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "players",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValStatusV1PlatformDataDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Locales == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "locales",
			Error: err,
		})
	}
	if err := func() error {
		if s.Maintenances == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Maintenances {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenances",
			Error: err,
		})
	}
	if err := func() error {
		if s.Incidents == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Incidents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incidents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ValStatusV1StatusDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.MaintenanceStatus.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maintenance_status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.IncidentSeverity.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incident_severity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Titles == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "titles",
			Error: err,
		})
	}
	if err := func() error {
		if s.Updates == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Updates {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "updates",
			Error: err,
		})
	}
	if err := func() error {
		if s.Platforms == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Platforms {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platforms",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValStatusV1StatusDtoIncidentSeverity) Validate() error {
	switch s {
	case "info":
		return nil
	case "warning":
		return nil
	case "critical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ValStatusV1StatusDtoMaintenanceStatus) Validate() error {
	switch s {
	case "scheduled":
		return nil
	case "in_progress":
		return nil
	case "complete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ValStatusV1StatusDtoPlatformsItem) Validate() error {
	switch s {
	case "windows":
		return nil
	case "macos":
		return nil
	case "android":
		return nil
	case "ios":
		return nil
	case "ps4":
		return nil
	case "xbone":
		return nil
	case "switch":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ValStatusV1UpdateDto) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.PublishLocations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.PublishLocations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "publish_locations",
			Error: err,
		})
	}
	if err := func() error {
		if s.Translations == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "translations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ValStatusV1UpdateDtoPublishLocationsItem) Validate() error {
	switch s {
	case "riotclient":
		return nil
	case "riotstatus":
		return nil
	case "game":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
