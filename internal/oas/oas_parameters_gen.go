// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AccountV1GetActiveRegionParams is parameters of account-v1.getActiveRegion operation.
type AccountV1GetActiveRegionParams struct {
	Puuid string
	Game  AccountV1GetActiveRegionGame
}

func unpackAccountV1GetActiveRegionParams(packed middleware.Parameters) (params AccountV1GetActiveRegionParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "game",
			In:   "path",
		}
		params.Game = packed[key].(AccountV1GetActiveRegionGame)
	}
	return params
}

func decodeAccountV1GetActiveRegionParams(args [2]string, argsEscaped bool, r *http.Request) (params AccountV1GetActiveRegionParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: game.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "game",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Game = AccountV1GetActiveRegionGame(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Game.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "game",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AccountV1GetActiveShardParams is parameters of account-v1.getActiveShard operation.
type AccountV1GetActiveShardParams struct {
	Game  AccountV1GetActiveShardGame
	Puuid string
}

func unpackAccountV1GetActiveShardParams(packed middleware.Parameters) (params AccountV1GetActiveShardParams) {
	{
		key := middleware.ParameterKey{
			Name: "game",
			In:   "path",
		}
		params.Game = packed[key].(AccountV1GetActiveShardGame)
	}
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeAccountV1GetActiveShardParams(args [2]string, argsEscaped bool, r *http.Request) (params AccountV1GetActiveShardParams, _ error) {
	// Decode path: game.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "game",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Game = AccountV1GetActiveShardGame(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Game.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "game",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: puuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AccountV1GetByPuuidParams is parameters of account-v1.getByPuuid operation.
type AccountV1GetByPuuidParams struct {
	Puuid string
}

func unpackAccountV1GetByPuuidParams(packed middleware.Parameters) (params AccountV1GetByPuuidParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeAccountV1GetByPuuidParams(args [1]string, argsEscaped bool, r *http.Request) (params AccountV1GetByPuuidParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AccountV1GetByRiotIdParams is parameters of account-v1.getByRiotId operation.
type AccountV1GetByRiotIdParams struct {
	// When querying for a player by their riot id, the gameName and tagLine query params are required.
	TagLine string
	// When querying for a player by their riot id, the gameName and tagLine query params are required.
	GameName string
}

func unpackAccountV1GetByRiotIdParams(packed middleware.Parameters) (params AccountV1GetByRiotIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "tagLine",
			In:   "path",
		}
		params.TagLine = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "gameName",
			In:   "path",
		}
		params.GameName = packed[key].(string)
	}
	return params
}

func decodeAccountV1GetByRiotIdParams(args [2]string, argsEscaped bool, r *http.Request) (params AccountV1GetByRiotIdParams, _ error) {
	// Decode path: tagLine.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tagLine",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TagLine = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tagLine",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: gameName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "gameName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GameName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "gameName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams is parameters of champion-mastery-v4.getAllChampionMasteriesByPUUID operation.
type ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams struct {
	EncryptedPUUID string
}

func unpackChampionMasteryV4GetAllChampionMasteriesByPUUIDParams(packed middleware.Parameters) (params ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeChampionMasteryV4GetAllChampionMasteriesByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChampionMasteryV4GetChampionMasteryByPUUIDParams is parameters of champion-mastery-v4.getChampionMasteryByPUUID operation.
type ChampionMasteryV4GetChampionMasteryByPUUIDParams struct {
	EncryptedPUUID string
	// Champion ID to retrieve Champion Mastery.
	ChampionId int32
}

func unpackChampionMasteryV4GetChampionMasteryByPUUIDParams(packed middleware.Parameters) (params ChampionMasteryV4GetChampionMasteryByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "championId",
			In:   "path",
		}
		params.ChampionId = packed[key].(int32)
	}
	return params
}

func decodeChampionMasteryV4GetChampionMasteryByPUUIDParams(args [2]string, argsEscaped bool, r *http.Request) (params ChampionMasteryV4GetChampionMasteryByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: championId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "championId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.ChampionId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "championId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams is parameters of champion-mastery-v4.getChampionMasteryScoreByPUUID operation.
type ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams struct {
	EncryptedPUUID string
}

func unpackChampionMasteryV4GetChampionMasteryScoreByPUUIDParams(packed middleware.Parameters) (params ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeChampionMasteryV4GetChampionMasteryScoreByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams is parameters of champion-mastery-v4.getTopChampionMasteriesByPUUID operation.
type ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams struct {
	EncryptedPUUID string
	// Number of entries to retrieve, defaults to 3.
	Count OptInt32
}

func unpackChampionMasteryV4GetTopChampionMasteriesByPUUIDParams(packed middleware.Parameters) (params ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	return params
}

func decodeChampionMasteryV4GetTopChampionMasteriesByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ClashV1GetPlayersByPUUIDParams is parameters of clash-v1.getPlayersByPUUID operation.
type ClashV1GetPlayersByPUUIDParams struct {
	Puuid string
}

func unpackClashV1GetPlayersByPUUIDParams(packed middleware.Parameters) (params ClashV1GetPlayersByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeClashV1GetPlayersByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params ClashV1GetPlayersByPUUIDParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ClashV1GetTeamByIdParams is parameters of clash-v1.getTeamById operation.
type ClashV1GetTeamByIdParams struct {
	TeamId string
}

func unpackClashV1GetTeamByIdParams(packed middleware.Parameters) (params ClashV1GetTeamByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "teamId",
			In:   "path",
		}
		params.TeamId = packed[key].(string)
	}
	return params
}

func decodeClashV1GetTeamByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params ClashV1GetTeamByIdParams, _ error) {
	// Decode path: teamId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "teamId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "teamId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ClashV1GetTournamentByIdParams is parameters of clash-v1.getTournamentById operation.
type ClashV1GetTournamentByIdParams struct {
	TournamentId int32
}

func unpackClashV1GetTournamentByIdParams(packed middleware.Parameters) (params ClashV1GetTournamentByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentId",
			In:   "path",
		}
		params.TournamentId = packed[key].(int32)
	}
	return params
}

func decodeClashV1GetTournamentByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params ClashV1GetTournamentByIdParams, _ error) {
	// Decode path: tournamentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.TournamentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ClashV1GetTournamentByTeamParams is parameters of clash-v1.getTournamentByTeam operation.
type ClashV1GetTournamentByTeamParams struct {
	TeamId string
}

func unpackClashV1GetTournamentByTeamParams(packed middleware.Parameters) (params ClashV1GetTournamentByTeamParams) {
	{
		key := middleware.ParameterKey{
			Name: "teamId",
			In:   "path",
		}
		params.TeamId = packed[key].(string)
	}
	return params
}

func decodeClashV1GetTournamentByTeamParams(args [1]string, argsEscaped bool, r *http.Request) (params ClashV1GetTournamentByTeamParams, _ error) {
	// Decode path: teamId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "teamId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TeamId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "teamId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueExpV4GetLeagueEntriesParams is parameters of league-exp-v4.getLeagueEntries operation.
type LeagueExpV4GetLeagueEntriesParams struct {
	// Note that the queue value must be a valid ranked queue.
	Queue    LeagueExpV4GetLeagueEntriesQueue
	Tier     LeagueExpV4GetLeagueEntriesTier
	Division LeagueExpV4GetLeagueEntriesDivision
	// Defaults to 1. Starts with page 1.
	Page OptInt32
}

func unpackLeagueExpV4GetLeagueEntriesParams(packed middleware.Parameters) (params LeagueExpV4GetLeagueEntriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(LeagueExpV4GetLeagueEntriesQueue)
	}
	{
		key := middleware.ParameterKey{
			Name: "tier",
			In:   "path",
		}
		params.Tier = packed[key].(LeagueExpV4GetLeagueEntriesTier)
	}
	{
		key := middleware.ParameterKey{
			Name: "division",
			In:   "path",
		}
		params.Division = packed[key].(LeagueExpV4GetLeagueEntriesDivision)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	return params
}

func decodeLeagueExpV4GetLeagueEntriesParams(args [3]string, argsEscaped bool, r *http.Request) (params LeagueExpV4GetLeagueEntriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = LeagueExpV4GetLeagueEntriesQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: tier.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Tier = LeagueExpV4GetLeagueEntriesTier(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Tier.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tier",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: division.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "division",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Division = LeagueExpV4GetLeagueEntriesDivision(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Division.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "division",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetChallengerLeagueParams is parameters of league-v4.getChallengerLeague operation.
type LeagueV4GetChallengerLeagueParams struct {
	Queue LeagueV4GetChallengerLeagueQueue
}

func unpackLeagueV4GetChallengerLeagueParams(packed middleware.Parameters) (params LeagueV4GetChallengerLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(LeagueV4GetChallengerLeagueQueue)
	}
	return params
}

func decodeLeagueV4GetChallengerLeagueParams(args [1]string, argsEscaped bool, r *http.Request) (params LeagueV4GetChallengerLeagueParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = LeagueV4GetChallengerLeagueQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetGrandmasterLeagueParams is parameters of league-v4.getGrandmasterLeague operation.
type LeagueV4GetGrandmasterLeagueParams struct {
	Queue LeagueV4GetGrandmasterLeagueQueue
}

func unpackLeagueV4GetGrandmasterLeagueParams(packed middleware.Parameters) (params LeagueV4GetGrandmasterLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(LeagueV4GetGrandmasterLeagueQueue)
	}
	return params
}

func decodeLeagueV4GetGrandmasterLeagueParams(args [1]string, argsEscaped bool, r *http.Request) (params LeagueV4GetGrandmasterLeagueParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = LeagueV4GetGrandmasterLeagueQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetLeagueByIdParams is parameters of league-v4.getLeagueById operation.
type LeagueV4GetLeagueByIdParams struct {
	// The UUID of the league.
	LeagueId string
}

func unpackLeagueV4GetLeagueByIdParams(packed middleware.Parameters) (params LeagueV4GetLeagueByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "leagueId",
			In:   "path",
		}
		params.LeagueId = packed[key].(string)
	}
	return params
}

func decodeLeagueV4GetLeagueByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params LeagueV4GetLeagueByIdParams, _ error) {
	// Decode path: leagueId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "leagueId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LeagueId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "leagueId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetLeagueEntriesParams is parameters of league-v4.getLeagueEntries operation.
type LeagueV4GetLeagueEntriesParams struct {
	Division LeagueV4GetLeagueEntriesDivision
	Tier     LeagueV4GetLeagueEntriesTier
	// Note that the queue value must be a valid ranked queue.
	Queue LeagueV4GetLeagueEntriesQueue
	// Defaults to 1. Starts with page 1.
	Page OptInt32
}

func unpackLeagueV4GetLeagueEntriesParams(packed middleware.Parameters) (params LeagueV4GetLeagueEntriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "division",
			In:   "path",
		}
		params.Division = packed[key].(LeagueV4GetLeagueEntriesDivision)
	}
	{
		key := middleware.ParameterKey{
			Name: "tier",
			In:   "path",
		}
		params.Tier = packed[key].(LeagueV4GetLeagueEntriesTier)
	}
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(LeagueV4GetLeagueEntriesQueue)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	return params
}

func decodeLeagueV4GetLeagueEntriesParams(args [3]string, argsEscaped bool, r *http.Request) (params LeagueV4GetLeagueEntriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: division.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "division",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Division = LeagueV4GetLeagueEntriesDivision(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Division.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "division",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: tier.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Tier = LeagueV4GetLeagueEntriesTier(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Tier.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tier",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = LeagueV4GetLeagueEntriesQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetLeagueEntriesByPUUIDParams is parameters of league-v4.getLeagueEntriesByPUUID operation.
type LeagueV4GetLeagueEntriesByPUUIDParams struct {
	EncryptedPUUID string
}

func unpackLeagueV4GetLeagueEntriesByPUUIDParams(packed middleware.Parameters) (params LeagueV4GetLeagueEntriesByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeLeagueV4GetLeagueEntriesByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params LeagueV4GetLeagueEntriesByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LeagueV4GetMasterLeagueParams is parameters of league-v4.getMasterLeague operation.
type LeagueV4GetMasterLeagueParams struct {
	Queue LeagueV4GetMasterLeagueQueue
}

func unpackLeagueV4GetMasterLeagueParams(packed middleware.Parameters) (params LeagueV4GetMasterLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(LeagueV4GetMasterLeagueQueue)
	}
	return params
}

func decodeLeagueV4GetMasterLeagueParams(args [1]string, argsEscaped bool, r *http.Request) (params LeagueV4GetMasterLeagueParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = LeagueV4GetMasterLeagueQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LolChallengesV1GetChallengeConfigsParams is parameters of lol-challenges-v1.getChallengeConfigs operation.
type LolChallengesV1GetChallengeConfigsParams struct {
	ChallengeId int64
}

func unpackLolChallengesV1GetChallengeConfigsParams(packed middleware.Parameters) (params LolChallengesV1GetChallengeConfigsParams) {
	{
		key := middleware.ParameterKey{
			Name: "challengeId",
			In:   "path",
		}
		params.ChallengeId = packed[key].(int64)
	}
	return params
}

func decodeLolChallengesV1GetChallengeConfigsParams(args [1]string, argsEscaped bool, r *http.Request) (params LolChallengesV1GetChallengeConfigsParams, _ error) {
	// Decode path: challengeId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "challengeId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ChallengeId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "challengeId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LolChallengesV1GetChallengeLeaderboardsParams is parameters of lol-challenges-v1.getChallengeLeaderboards operation.
type LolChallengesV1GetChallengeLeaderboardsParams struct {
	Level       LolChallengesV1GetChallengeLeaderboardsLevel
	ChallengeId int64
	Limit       OptInt32
}

func unpackLolChallengesV1GetChallengeLeaderboardsParams(packed middleware.Parameters) (params LolChallengesV1GetChallengeLeaderboardsParams) {
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "path",
		}
		params.Level = packed[key].(LolChallengesV1GetChallengeLeaderboardsLevel)
	}
	{
		key := middleware.ParameterKey{
			Name: "challengeId",
			In:   "path",
		}
		params.ChallengeId = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeLolChallengesV1GetChallengeLeaderboardsParams(args [2]string, argsEscaped bool, r *http.Request) (params LolChallengesV1GetChallengeLeaderboardsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: level.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "level",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Level = LolChallengesV1GetChallengeLeaderboardsLevel(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Level.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: challengeId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "challengeId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ChallengeId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "challengeId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LolChallengesV1GetChallengePercentilesParams is parameters of lol-challenges-v1.getChallengePercentiles operation.
type LolChallengesV1GetChallengePercentilesParams struct {
	ChallengeId int64
}

func unpackLolChallengesV1GetChallengePercentilesParams(packed middleware.Parameters) (params LolChallengesV1GetChallengePercentilesParams) {
	{
		key := middleware.ParameterKey{
			Name: "challengeId",
			In:   "path",
		}
		params.ChallengeId = packed[key].(int64)
	}
	return params
}

func decodeLolChallengesV1GetChallengePercentilesParams(args [1]string, argsEscaped bool, r *http.Request) (params LolChallengesV1GetChallengePercentilesParams, _ error) {
	// Decode path: challengeId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "challengeId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ChallengeId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "challengeId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LolChallengesV1GetPlayerDataParams is parameters of lol-challenges-v1.getPlayerData operation.
type LolChallengesV1GetPlayerDataParams struct {
	Puuid string
}

func unpackLolChallengesV1GetPlayerDataParams(packed middleware.Parameters) (params LolChallengesV1GetPlayerDataParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeLolChallengesV1GetPlayerDataParams(args [1]string, argsEscaped bool, r *http.Request) (params LolChallengesV1GetPlayerDataParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LolRsoMatchV1GetMatchParams is parameters of lol-rso-match-v1.getMatch operation.
type LolRsoMatchV1GetMatchParams struct {
	MatchId string
}

func unpackLolRsoMatchV1GetMatchParams(packed middleware.Parameters) (params LolRsoMatchV1GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeLolRsoMatchV1GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params LolRsoMatchV1GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LolRsoMatchV1GetMatchIdsParams is parameters of lol-rso-match-v1.getMatchIds operation.
type LolRsoMatchV1GetMatchIdsParams struct {
	// Defaults to 20. Valid values: 0 to 100. Number of match ids to return.
	Count OptInt32
	// Defaults to 0. Start index.
	Start OptInt32
	// Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue
	// filter meaning any match ids returned must match both the queue and type filters.
	Type OptLolRsoMatchV1GetMatchIdsType
	// Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type
	// filter meaning any match ids returned must match both the queue and type filters.
	Queue OptInt32
	// Epoch timestamp in seconds.
	EndTime OptInt64
	// Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any
	// matches played before June 16th, 2021 won't be included in the results if the startTime filter is
	// set.
	StartTime OptInt64
}

func unpackLolRsoMatchV1GetMatchIdsParams(packed middleware.Parameters) (params LolRsoMatchV1GetMatchIdsParams) {
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptLolRsoMatchV1GetMatchIdsType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "endTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndTime = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "startTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartTime = v.(OptInt64)
		}
	}
	return params
}

func decodeLolRsoMatchV1GetMatchIdsParams(args [0]string, argsEscaped bool, r *http.Request) (params LolRsoMatchV1GetMatchIdsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal LolRsoMatchV1GetMatchIdsType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = LolRsoMatchV1GetMatchIdsType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: endTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "endTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotEndTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndTime.SetTo(paramsDotEndTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "endTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotStartTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartTime.SetTo(paramsDotStartTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startTime",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LolRsoMatchV1GetTimelineParams is parameters of lol-rso-match-v1.getTimeline operation.
type LolRsoMatchV1GetTimelineParams struct {
	MatchId string
}

func unpackLolRsoMatchV1GetTimelineParams(packed middleware.Parameters) (params LolRsoMatchV1GetTimelineParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeLolRsoMatchV1GetTimelineParams(args [1]string, argsEscaped bool, r *http.Request) (params LolRsoMatchV1GetTimelineParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LorMatchV1GetMatchParams is parameters of lor-match-v1.getMatch operation.
type LorMatchV1GetMatchParams struct {
	MatchId string
}

func unpackLorMatchV1GetMatchParams(packed middleware.Parameters) (params LorMatchV1GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeLorMatchV1GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params LorMatchV1GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// LorMatchV1GetMatchIdsByPUUIDParams is parameters of lor-match-v1.getMatchIdsByPUUID operation.
type LorMatchV1GetMatchIdsByPUUIDParams struct {
	Puuid string
}

func unpackLorMatchV1GetMatchIdsByPUUIDParams(packed middleware.Parameters) (params LorMatchV1GetMatchIdsByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeLorMatchV1GetMatchIdsByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params LorMatchV1GetMatchIdsByPUUIDParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// MatchV5GetMatchParams is parameters of match-v5.getMatch operation.
type MatchV5GetMatchParams struct {
	MatchId string
}

func unpackMatchV5GetMatchParams(packed middleware.Parameters) (params MatchV5GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeMatchV5GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params MatchV5GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// MatchV5GetMatchIdsByPUUIDParams is parameters of match-v5.getMatchIdsByPUUID operation.
type MatchV5GetMatchIdsByPUUIDParams struct {
	Puuid string
	// Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any
	// matches played before June 16th, 2021 won't be included in the results if the startTime filter is
	// set.
	StartTime OptInt64
	// Epoch timestamp in seconds.
	EndTime OptInt64
	// Filter the list of match ids by a specific queue id. This filter is mutually inclusive of the type
	// filter meaning any match ids returned must match both the queue and type filters.
	Queue OptInt32
	// Filter the list of match ids by the type of match. This filter is mutually inclusive of the queue
	// filter meaning any match ids returned must match both the queue and type filters.
	Type OptMatchV5GetMatchIdsByPUUIDType
	// Defaults to 0. Start index.
	Start OptInt32
	// Defaults to 20. Valid values: 0 to 100. Number of match ids to return.
	Count OptInt32
}

func unpackMatchV5GetMatchIdsByPUUIDParams(packed middleware.Parameters) (params MatchV5GetMatchIdsByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "startTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartTime = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "endTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndTime = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptMatchV5GetMatchIdsByPUUIDType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	return params
}

func decodeMatchV5GetMatchIdsByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params MatchV5GetMatchIdsByPUUIDParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: startTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotStartTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartTime.SetTo(paramsDotStartTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: endTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "endTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotEndTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndTime.SetTo(paramsDotEndTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "endTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal MatchV5GetMatchIdsByPUUIDType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = MatchV5GetMatchIdsByPUUIDType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// MatchV5GetTimelineParams is parameters of match-v5.getTimeline operation.
type MatchV5GetTimelineParams struct {
	MatchId string
}

func unpackMatchV5GetTimelineParams(packed middleware.Parameters) (params MatchV5GetTimelineParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeMatchV5GetTimelineParams(args [1]string, argsEscaped bool, r *http.Request) (params MatchV5GetTimelineParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SpectatorTftV5GetCurrentGameInfoByPuuidParams is parameters of spectator-tft-v5.getCurrentGameInfoByPuuid operation.
type SpectatorTftV5GetCurrentGameInfoByPuuidParams struct {
	// The puuid of the summoner.
	EncryptedPUUID string
}

func unpackSpectatorTftV5GetCurrentGameInfoByPuuidParams(packed middleware.Parameters) (params SpectatorTftV5GetCurrentGameInfoByPuuidParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeSpectatorTftV5GetCurrentGameInfoByPuuidParams(args [1]string, argsEscaped bool, r *http.Request) (params SpectatorTftV5GetCurrentGameInfoByPuuidParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SpectatorV5GetCurrentGameInfoByPuuidParams is parameters of spectator-v5.getCurrentGameInfoByPuuid operation.
type SpectatorV5GetCurrentGameInfoByPuuidParams struct {
	// The puuid of the summoner.
	EncryptedPUUID string
}

func unpackSpectatorV5GetCurrentGameInfoByPuuidParams(packed middleware.Parameters) (params SpectatorV5GetCurrentGameInfoByPuuidParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeSpectatorV5GetCurrentGameInfoByPuuidParams(args [1]string, argsEscaped bool, r *http.Request) (params SpectatorV5GetCurrentGameInfoByPuuidParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SummonerV4GetByPUUIDParams is parameters of summoner-v4.getByPUUID operation.
type SummonerV4GetByPUUIDParams struct {
	// Summoner ID.
	EncryptedPUUID string
}

func unpackSummonerV4GetByPUUIDParams(packed middleware.Parameters) (params SummonerV4GetByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeSummonerV4GetByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params SummonerV4GetByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetChallengerLeagueParams is parameters of tft-league-v1.getChallengerLeague operation.
type TftLeagueV1GetChallengerLeagueParams struct {
	// Defaults to RANKED_TFT.
	Queue OptTftLeagueV1GetChallengerLeagueQueue
}

func unpackTftLeagueV1GetChallengerLeagueParams(packed middleware.Parameters) (params TftLeagueV1GetChallengerLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptTftLeagueV1GetChallengerLeagueQueue)
		}
	}
	return params
}

func decodeTftLeagueV1GetChallengerLeagueParams(args [0]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetChallengerLeagueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal TftLeagueV1GetChallengerLeagueQueue
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = TftLeagueV1GetChallengerLeagueQueue(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Queue.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetGrandmasterLeagueParams is parameters of tft-league-v1.getGrandmasterLeague operation.
type TftLeagueV1GetGrandmasterLeagueParams struct {
	// Defaults to RANKED_TFT.
	Queue OptTftLeagueV1GetGrandmasterLeagueQueue
}

func unpackTftLeagueV1GetGrandmasterLeagueParams(packed middleware.Parameters) (params TftLeagueV1GetGrandmasterLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptTftLeagueV1GetGrandmasterLeagueQueue)
		}
	}
	return params
}

func decodeTftLeagueV1GetGrandmasterLeagueParams(args [0]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetGrandmasterLeagueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal TftLeagueV1GetGrandmasterLeagueQueue
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = TftLeagueV1GetGrandmasterLeagueQueue(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Queue.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetLeagueByIdParams is parameters of tft-league-v1.getLeagueById operation.
type TftLeagueV1GetLeagueByIdParams struct {
	// The UUID of the league.
	LeagueId string
}

func unpackTftLeagueV1GetLeagueByIdParams(packed middleware.Parameters) (params TftLeagueV1GetLeagueByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "leagueId",
			In:   "path",
		}
		params.LeagueId = packed[key].(string)
	}
	return params
}

func decodeTftLeagueV1GetLeagueByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetLeagueByIdParams, _ error) {
	// Decode path: leagueId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "leagueId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.LeagueId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "leagueId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetLeagueEntriesParams is parameters of tft-league-v1.getLeagueEntries operation.
type TftLeagueV1GetLeagueEntriesParams struct {
	Tier     TftLeagueV1GetLeagueEntriesTier
	Division TftLeagueV1GetLeagueEntriesDivision
	// Defaults to RANKED_TFT.
	Queue OptTftLeagueV1GetLeagueEntriesQueue
	// Defaults to 1. Starts with page 1.
	Page OptInt32
}

func unpackTftLeagueV1GetLeagueEntriesParams(packed middleware.Parameters) (params TftLeagueV1GetLeagueEntriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "tier",
			In:   "path",
		}
		params.Tier = packed[key].(TftLeagueV1GetLeagueEntriesTier)
	}
	{
		key := middleware.ParameterKey{
			Name: "division",
			In:   "path",
		}
		params.Division = packed[key].(TftLeagueV1GetLeagueEntriesDivision)
	}
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptTftLeagueV1GetLeagueEntriesQueue)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	return params
}

func decodeTftLeagueV1GetLeagueEntriesParams(args [2]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetLeagueEntriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Tier = TftLeagueV1GetLeagueEntriesTier(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Tier.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tier",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: division.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "division",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Division = TftLeagueV1GetLeagueEntriesDivision(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Division.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "division",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal TftLeagueV1GetLeagueEntriesQueue
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = TftLeagueV1GetLeagueEntriesQueue(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Queue.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetLeagueEntriesByPUUIDParams is parameters of tft-league-v1.getLeagueEntriesByPUUID operation.
type TftLeagueV1GetLeagueEntriesByPUUIDParams struct {
	Puuid string
}

func unpackTftLeagueV1GetLeagueEntriesByPUUIDParams(packed middleware.Parameters) (params TftLeagueV1GetLeagueEntriesByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeTftLeagueV1GetLeagueEntriesByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetLeagueEntriesByPUUIDParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetMasterLeagueParams is parameters of tft-league-v1.getMasterLeague operation.
type TftLeagueV1GetMasterLeagueParams struct {
	// Defaults to RANKED_TFT.
	Queue OptTftLeagueV1GetMasterLeagueQueue
}

func unpackTftLeagueV1GetMasterLeagueParams(packed middleware.Parameters) (params TftLeagueV1GetMasterLeagueParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Queue = v.(OptTftLeagueV1GetMasterLeagueQueue)
		}
	}
	return params
}

func decodeTftLeagueV1GetMasterLeagueParams(args [0]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetMasterLeagueParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: queue.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "queue",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotQueueVal TftLeagueV1GetMasterLeagueQueue
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotQueueVal = TftLeagueV1GetMasterLeagueQueue(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Queue.SetTo(paramsDotQueueVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Queue.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TftLeagueV1GetTopRatedLadderParams is parameters of tft-league-v1.getTopRatedLadder operation.
type TftLeagueV1GetTopRatedLadderParams struct {
	Queue TftLeagueV1GetTopRatedLadderQueue
}

func unpackTftLeagueV1GetTopRatedLadderParams(packed middleware.Parameters) (params TftLeagueV1GetTopRatedLadderParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(TftLeagueV1GetTopRatedLadderQueue)
	}
	return params
}

func decodeTftLeagueV1GetTopRatedLadderParams(args [1]string, argsEscaped bool, r *http.Request) (params TftLeagueV1GetTopRatedLadderParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = TftLeagueV1GetTopRatedLadderQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TftMatchV1GetMatchParams is parameters of tft-match-v1.getMatch operation.
type TftMatchV1GetMatchParams struct {
	MatchId string
}

func unpackTftMatchV1GetMatchParams(packed middleware.Parameters) (params TftMatchV1GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeTftMatchV1GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params TftMatchV1GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TftMatchV1GetMatchIdsByPUUIDParams is parameters of tft-match-v1.getMatchIdsByPUUID operation.
type TftMatchV1GetMatchIdsByPUUIDParams struct {
	Puuid string
	// Defaults to 0. Start index.
	Start OptInt32
	// Epoch timestamp in seconds.
	EndTime OptInt64
	// Epoch timestamp in seconds. The matchlist started storing timestamps on June 16th, 2021. Any
	// matches played before June 16th, 2021 won't be included in the results if the startTime filter is
	// set.
	StartTime OptInt64
	// Defaults to 20. Number of match ids to return.
	Count OptInt32
}

func unpackTftMatchV1GetMatchIdsByPUUIDParams(packed middleware.Parameters) (params TftMatchV1GetMatchIdsByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "endTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndTime = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "startTime",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartTime = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	return params
}

func decodeTftMatchV1GetMatchIdsByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params TftMatchV1GetMatchIdsByPUUIDParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: endTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "endTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotEndTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndTime.SetTo(paramsDotEndTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "endTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startTime.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startTime",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartTimeVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotStartTimeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartTime.SetTo(paramsDotStartTimeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startTime",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TftSummonerV1GetByPUUIDParams is parameters of tft-summoner-v1.getByPUUID operation.
type TftSummonerV1GetByPUUIDParams struct {
	// Summoner ID.
	EncryptedPUUID string
}

func unpackTftSummonerV1GetByPUUIDParams(packed middleware.Parameters) (params TftSummonerV1GetByPUUIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "encryptedPUUID",
			In:   "path",
		}
		params.EncryptedPUUID = packed[key].(string)
	}
	return params
}

func decodeTftSummonerV1GetByPUUIDParams(args [1]string, argsEscaped bool, r *http.Request) (params TftSummonerV1GetByPUUIDParams, _ error) {
	// Decode path: encryptedPUUID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "encryptedPUUID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EncryptedPUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "encryptedPUUID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentStubV5CreateTournamentCodeParams is parameters of tournament-stub-v5.createTournamentCode operation.
type TournamentStubV5CreateTournamentCodeParams struct {
	// The number of codes to create (max 1000).
	Count OptInt32
	// The tournament ID.
	TournamentId int64
}

func unpackTournamentStubV5CreateTournamentCodeParams(packed middleware.Parameters) (params TournamentStubV5CreateTournamentCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tournamentId",
			In:   "query",
		}
		params.TournamentId = packed[key].(int64)
	}
	return params
}

func decodeTournamentStubV5CreateTournamentCodeParams(args [0]string, argsEscaped bool, r *http.Request) (params TournamentStubV5CreateTournamentCodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tournamentId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tournamentId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TournamentId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentStubV5GetLobbyEventsByCodeParams is parameters of tournament-stub-v5.getLobbyEventsByCode operation.
type TournamentStubV5GetLobbyEventsByCodeParams struct {
	// The short code to look up lobby events for.
	TournamentCode string
}

func unpackTournamentStubV5GetLobbyEventsByCodeParams(packed middleware.Parameters) (params TournamentStubV5GetLobbyEventsByCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentStubV5GetLobbyEventsByCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentStubV5GetLobbyEventsByCodeParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentStubV5GetTournamentCodeParams is parameters of tournament-stub-v5.getTournamentCode operation.
type TournamentStubV5GetTournamentCodeParams struct {
	// The tournament code string.
	TournamentCode string
}

func unpackTournamentStubV5GetTournamentCodeParams(packed middleware.Parameters) (params TournamentStubV5GetTournamentCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentStubV5GetTournamentCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentStubV5GetTournamentCodeParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentV5CreateTournamentCodeParams is parameters of tournament-v5.createTournamentCode operation.
type TournamentV5CreateTournamentCodeParams struct {
	// The tournament ID.
	TournamentId int64
	// The number of codes to create (max 1000).
	Count OptInt32
}

func unpackTournamentV5CreateTournamentCodeParams(packed middleware.Parameters) (params TournamentV5CreateTournamentCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentId",
			In:   "query",
		}
		params.TournamentId = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptInt32)
		}
	}
	return params
}

func decodeTournamentV5CreateTournamentCodeParams(args [0]string, argsEscaped bool, r *http.Request) (params TournamentV5CreateTournamentCodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: tournamentId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tournamentId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TournamentId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentV5GetGamesParams is parameters of tournament-v5.getGames operation.
type TournamentV5GetGamesParams struct {
	TournamentCode string
}

func unpackTournamentV5GetGamesParams(packed middleware.Parameters) (params TournamentV5GetGamesParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentV5GetGamesParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentV5GetGamesParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentV5GetLobbyEventsByCodeParams is parameters of tournament-v5.getLobbyEventsByCode operation.
type TournamentV5GetLobbyEventsByCodeParams struct {
	// The short code to look up lobby events for.
	TournamentCode string
}

func unpackTournamentV5GetLobbyEventsByCodeParams(packed middleware.Parameters) (params TournamentV5GetLobbyEventsByCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentV5GetLobbyEventsByCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentV5GetLobbyEventsByCodeParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentV5GetTournamentCodeParams is parameters of tournament-v5.getTournamentCode operation.
type TournamentV5GetTournamentCodeParams struct {
	// The tournament code string.
	TournamentCode string
}

func unpackTournamentV5GetTournamentCodeParams(packed middleware.Parameters) (params TournamentV5GetTournamentCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentV5GetTournamentCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentV5GetTournamentCodeParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TournamentV5UpdateCodeParams is parameters of tournament-v5.updateCode operation.
type TournamentV5UpdateCodeParams struct {
	// The tournament code to update.
	TournamentCode string
}

func unpackTournamentV5UpdateCodeParams(packed middleware.Parameters) (params TournamentV5UpdateCodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "tournamentCode",
			In:   "path",
		}
		params.TournamentCode = packed[key].(string)
	}
	return params
}

func decodeTournamentV5UpdateCodeParams(args [1]string, argsEscaped bool, r *http.Request) (params TournamentV5UpdateCodeParams, _ error) {
	// Decode path: tournamentCode.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tournamentCode",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TournamentCode = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tournamentCode",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValConsoleMatchV1GetMatchParams is parameters of val-console-match-v1.getMatch operation.
type ValConsoleMatchV1GetMatchParams struct {
	MatchId string
}

func unpackValConsoleMatchV1GetMatchParams(packed middleware.Parameters) (params ValConsoleMatchV1GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeValConsoleMatchV1GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params ValConsoleMatchV1GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValConsoleMatchV1GetMatchlistParams is parameters of val-console-match-v1.getMatchlist operation.
type ValConsoleMatchV1GetMatchlistParams struct {
	Puuid        string
	PlatformType ValConsoleMatchV1GetMatchlistPlatformType
}

func unpackValConsoleMatchV1GetMatchlistParams(packed middleware.Parameters) (params ValConsoleMatchV1GetMatchlistParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "platformType",
			In:   "query",
		}
		params.PlatformType = packed[key].(ValConsoleMatchV1GetMatchlistPlatformType)
	}
	return params
}

func decodeValConsoleMatchV1GetMatchlistParams(args [1]string, argsEscaped bool, r *http.Request) (params ValConsoleMatchV1GetMatchlistParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: platformType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "platformType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PlatformType = ValConsoleMatchV1GetMatchlistPlatformType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PlatformType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "platformType",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ValConsoleMatchV1GetRecentParams is parameters of val-console-match-v1.getRecent operation.
type ValConsoleMatchV1GetRecentParams struct {
	Queue ValConsoleMatchV1GetRecentQueue
}

func unpackValConsoleMatchV1GetRecentParams(packed middleware.Parameters) (params ValConsoleMatchV1GetRecentParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(ValConsoleMatchV1GetRecentQueue)
	}
	return params
}

func decodeValConsoleMatchV1GetRecentParams(args [1]string, argsEscaped bool, r *http.Request) (params ValConsoleMatchV1GetRecentParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = ValConsoleMatchV1GetRecentQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValConsoleRankedV1GetLeaderboardParams is parameters of val-console-ranked-v1.getLeaderboard operation.
type ValConsoleRankedV1GetLeaderboardParams struct {
	// Act ids can be found using the val-content API.
	ActId        string
	PlatformType ValConsoleRankedV1GetLeaderboardPlatformType
	// Defaults to 0.
	StartIndex OptInt32
	// Defaults to 200. Valid values: 1 to 200.
	Size OptInt32
}

func unpackValConsoleRankedV1GetLeaderboardParams(packed middleware.Parameters) (params ValConsoleRankedV1GetLeaderboardParams) {
	{
		key := middleware.ParameterKey{
			Name: "actId",
			In:   "path",
		}
		params.ActId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "platformType",
			In:   "query",
		}
		params.PlatformType = packed[key].(ValConsoleRankedV1GetLeaderboardPlatformType)
	}
	{
		key := middleware.ParameterKey{
			Name: "startIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartIndex = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Size = v.(OptInt32)
		}
	}
	return params
}

func decodeValConsoleRankedV1GetLeaderboardParams(args [1]string, argsEscaped bool, r *http.Request) (params ValConsoleRankedV1GetLeaderboardParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: actId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "actId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ActId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "actId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: platformType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "platformType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PlatformType = ValConsoleRankedV1GetLeaderboardPlatformType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PlatformType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "platformType",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartIndexVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotStartIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartIndex.SetTo(paramsDotStartIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startIndex",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Size.SetTo(paramsDotSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ValContentV1GetContentParams is parameters of val-content-v1.getContent operation.
type ValContentV1GetContentParams struct {
	Locale OptString
}

func unpackValContentV1GetContentParams(packed middleware.Parameters) (params ValContentV1GetContentParams) {
	{
		key := middleware.ParameterKey{
			Name: "locale",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Locale = v.(OptString)
		}
	}
	return params
}

func decodeValContentV1GetContentParams(args [0]string, argsEscaped bool, r *http.Request) (params ValContentV1GetContentParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: locale.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "locale",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocaleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLocaleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Locale.SetTo(paramsDotLocaleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "locale",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ValMatchV1GetMatchParams is parameters of val-match-v1.getMatch operation.
type ValMatchV1GetMatchParams struct {
	MatchId string
}

func unpackValMatchV1GetMatchParams(packed middleware.Parameters) (params ValMatchV1GetMatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "matchId",
			In:   "path",
		}
		params.MatchId = packed[key].(string)
	}
	return params
}

func decodeValMatchV1GetMatchParams(args [1]string, argsEscaped bool, r *http.Request) (params ValMatchV1GetMatchParams, _ error) {
	// Decode path: matchId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "matchId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MatchId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "matchId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValMatchV1GetMatchlistParams is parameters of val-match-v1.getMatchlist operation.
type ValMatchV1GetMatchlistParams struct {
	Puuid string
}

func unpackValMatchV1GetMatchlistParams(packed middleware.Parameters) (params ValMatchV1GetMatchlistParams) {
	{
		key := middleware.ParameterKey{
			Name: "puuid",
			In:   "path",
		}
		params.Puuid = packed[key].(string)
	}
	return params
}

func decodeValMatchV1GetMatchlistParams(args [1]string, argsEscaped bool, r *http.Request) (params ValMatchV1GetMatchlistParams, _ error) {
	// Decode path: puuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "puuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Puuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "puuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValMatchV1GetRecentParams is parameters of val-match-v1.getRecent operation.
type ValMatchV1GetRecentParams struct {
	Queue ValMatchV1GetRecentQueue
}

func unpackValMatchV1GetRecentParams(packed middleware.Parameters) (params ValMatchV1GetRecentParams) {
	{
		key := middleware.ParameterKey{
			Name: "queue",
			In:   "path",
		}
		params.Queue = packed[key].(ValMatchV1GetRecentQueue)
	}
	return params
}

func decodeValMatchV1GetRecentParams(args [1]string, argsEscaped bool, r *http.Request) (params ValMatchV1GetRecentParams, _ error) {
	// Decode path: queue.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "queue",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Queue = ValMatchV1GetRecentQueue(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Queue.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "queue",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValRankedV1GetLeaderboardParams is parameters of val-ranked-v1.getLeaderboard operation.
type ValRankedV1GetLeaderboardParams struct {
	// Act ids can be found using the val-content API.
	ActId string
	// Defaults to 200. Valid values: 1 to 200.
	Size OptInt32
	// Defaults to 0.
	StartIndex OptInt32
}

func unpackValRankedV1GetLeaderboardParams(packed middleware.Parameters) (params ValRankedV1GetLeaderboardParams) {
	{
		key := middleware.ParameterKey{
			Name: "actId",
			In:   "path",
		}
		params.ActId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Size = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "startIndex",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartIndex = v.(OptInt32)
		}
	}
	return params
}

func decodeValRankedV1GetLeaderboardParams(args [1]string, argsEscaped bool, r *http.Request) (params ValRankedV1GetLeaderboardParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: actId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "actId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ActId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "actId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Size.SetTo(paramsDotSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startIndex.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startIndex",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartIndexVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotStartIndexVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartIndex.SetTo(paramsDotStartIndexVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startIndex",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
