// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AccountV1GetActiveRegion implements account-v1.getActiveRegion operation.
//
// Get active region (lol and tft).
//
// GET /riot/account/v1/region/by-game/{game}/by-puuid/{puuid}
func (UnimplementedHandler) AccountV1GetActiveRegion(ctx context.Context, params AccountV1GetActiveRegionParams) (r AccountV1GetActiveRegionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountV1GetActiveShard implements account-v1.getActiveShard operation.
//
// Get active shard for a player.
//
// GET /riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}
func (UnimplementedHandler) AccountV1GetActiveShard(ctx context.Context, params AccountV1GetActiveShardParams) (r AccountV1GetActiveShardRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountV1GetByAccessToken implements account-v1.getByAccessToken operation.
//
// Get account by access token.
//
// GET /riot/account/v1/accounts/me
func (UnimplementedHandler) AccountV1GetByAccessToken(ctx context.Context) (r AccountV1GetByAccessTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountV1GetByPuuid implements account-v1.getByPuuid operation.
//
// Get account by puuid.
//
// GET /riot/account/v1/accounts/by-puuid/{puuid}
func (UnimplementedHandler) AccountV1GetByPuuid(ctx context.Context, params AccountV1GetByPuuidParams) (r AccountV1GetByPuuidRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AccountV1GetByRiotId implements account-v1.getByRiotId operation.
//
// Get account by riot id.
//
// GET /riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}
func (UnimplementedHandler) AccountV1GetByRiotId(ctx context.Context, params AccountV1GetByRiotIdParams) (r AccountV1GetByRiotIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChampionMasteryV4GetAllChampionMasteriesByPUUID implements champion-mastery-v4.getAllChampionMasteriesByPUUID operation.
//
// Get all champion mastery entries sorted by number of champion points descending.
//
// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) ChampionMasteryV4GetAllChampionMasteriesByPUUID(ctx context.Context, params ChampionMasteryV4GetAllChampionMasteriesByPUUIDParams) (r ChampionMasteryV4GetAllChampionMasteriesByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChampionMasteryV4GetChampionMasteryByPUUID implements champion-mastery-v4.getChampionMasteryByPUUID operation.
//
// Get a champion mastery by puuid and champion ID.
//
// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/by-champion/{championId}
func (UnimplementedHandler) ChampionMasteryV4GetChampionMasteryByPUUID(ctx context.Context, params ChampionMasteryV4GetChampionMasteryByPUUIDParams) (r ChampionMasteryV4GetChampionMasteryByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChampionMasteryV4GetChampionMasteryScoreByPUUID implements champion-mastery-v4.getChampionMasteryScoreByPUUID operation.
//
// Get a player's total champion mastery score, which is the sum of individual champion mastery
// levels.
//
// GET /lol/champion-mastery/v4/scores/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) ChampionMasteryV4GetChampionMasteryScoreByPUUID(ctx context.Context, params ChampionMasteryV4GetChampionMasteryScoreByPUUIDParams) (r ChampionMasteryV4GetChampionMasteryScoreByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChampionMasteryV4GetTopChampionMasteriesByPUUID implements champion-mastery-v4.getTopChampionMasteriesByPUUID operation.
//
// Get specified number of top champion mastery entries sorted by number of champion points
// descending.
//
// GET /lol/champion-mastery/v4/champion-masteries/by-puuid/{encryptedPUUID}/top
func (UnimplementedHandler) ChampionMasteryV4GetTopChampionMasteriesByPUUID(ctx context.Context, params ChampionMasteryV4GetTopChampionMasteriesByPUUIDParams) (r ChampionMasteryV4GetTopChampionMasteriesByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ChampionV3GetChampionInfo implements champion-v3.getChampionInfo operation.
//
// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST).
//
// GET /lol/platform/v3/champion-rotations
func (UnimplementedHandler) ChampionV3GetChampionInfo(ctx context.Context) (r ChampionV3GetChampionInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ClashV1GetPlayersByPUUID implements clash-v1.getPlayersByPUUID operation.
//
// Get players by puuid
// ## Implementation Notes
// This endpoint returns a list of active Clash players for a given PUUID. If a summoner registers
// for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations
// would appear in this list.
//
// GET /lol/clash/v1/players/by-puuid/{puuid}
func (UnimplementedHandler) ClashV1GetPlayersByPUUID(ctx context.Context, params ClashV1GetPlayersByPUUIDParams) (r ClashV1GetPlayersByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ClashV1GetTeamById implements clash-v1.getTeamById operation.
//
// Get team by ID.
//
// GET /lol/clash/v1/teams/{teamId}
func (UnimplementedHandler) ClashV1GetTeamById(ctx context.Context, params ClashV1GetTeamByIdParams) (r ClashV1GetTeamByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ClashV1GetTournamentById implements clash-v1.getTournamentById operation.
//
// Get tournament by ID.
//
// GET /lol/clash/v1/tournaments/{tournamentId}
func (UnimplementedHandler) ClashV1GetTournamentById(ctx context.Context, params ClashV1GetTournamentByIdParams) (r ClashV1GetTournamentByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ClashV1GetTournamentByTeam implements clash-v1.getTournamentByTeam operation.
//
// Get tournament by team ID.
//
// GET /lol/clash/v1/tournaments/by-team/{teamId}
func (UnimplementedHandler) ClashV1GetTournamentByTeam(ctx context.Context, params ClashV1GetTournamentByTeamParams) (r ClashV1GetTournamentByTeamRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ClashV1GetTournaments implements clash-v1.getTournaments operation.
//
// Get all active or upcoming tournaments.
//
// GET /lol/clash/v1/tournaments
func (UnimplementedHandler) ClashV1GetTournaments(ctx context.Context) (r ClashV1GetTournamentsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueExpV4GetLeagueEntries implements league-exp-v4.getLeagueEntries operation.
//
// Get all the league entries.
//
// GET /lol/league-exp/v4/entries/{queue}/{tier}/{division}
func (UnimplementedHandler) LeagueExpV4GetLeagueEntries(ctx context.Context, params LeagueExpV4GetLeagueEntriesParams) (r LeagueExpV4GetLeagueEntriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetChallengerLeague implements league-v4.getChallengerLeague operation.
//
// Get the challenger league for given queue.
//
// GET /lol/league/v4/challengerleagues/by-queue/{queue}
func (UnimplementedHandler) LeagueV4GetChallengerLeague(ctx context.Context, params LeagueV4GetChallengerLeagueParams) (r LeagueV4GetChallengerLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetGrandmasterLeague implements league-v4.getGrandmasterLeague operation.
//
// Get the grandmaster league of a specific queue.
//
// GET /lol/league/v4/grandmasterleagues/by-queue/{queue}
func (UnimplementedHandler) LeagueV4GetGrandmasterLeague(ctx context.Context, params LeagueV4GetGrandmasterLeagueParams) (r LeagueV4GetGrandmasterLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetLeagueById implements league-v4.getLeagueById operation.
//
// Get league with given ID, including inactive entries.
//
// GET /lol/league/v4/leagues/{leagueId}
func (UnimplementedHandler) LeagueV4GetLeagueById(ctx context.Context, params LeagueV4GetLeagueByIdParams) (r LeagueV4GetLeagueByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetLeagueEntries implements league-v4.getLeagueEntries operation.
//
// Get all the league entries.
//
// GET /lol/league/v4/entries/{queue}/{tier}/{division}
func (UnimplementedHandler) LeagueV4GetLeagueEntries(ctx context.Context, params LeagueV4GetLeagueEntriesParams) (r LeagueV4GetLeagueEntriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetLeagueEntriesByPUUID implements league-v4.getLeagueEntriesByPUUID operation.
//
// Get league entries in all queues for a given puuid.
//
// GET /lol/league/v4/entries/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) LeagueV4GetLeagueEntriesByPUUID(ctx context.Context, params LeagueV4GetLeagueEntriesByPUUIDParams) (r LeagueV4GetLeagueEntriesByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LeagueV4GetMasterLeague implements league-v4.getMasterLeague operation.
//
// Get the master league for given queue.
//
// GET /lol/league/v4/masterleagues/by-queue/{queue}
func (UnimplementedHandler) LeagueV4GetMasterLeague(ctx context.Context, params LeagueV4GetMasterLeagueParams) (r LeagueV4GetMasterLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetAllChallengeConfigs implements lol-challenges-v1.getAllChallengeConfigs operation.
//
// List of all basic challenge configuration information (includes all translations for names and
// descriptions).
//
// GET /lol/challenges/v1/challenges/config
func (UnimplementedHandler) LolChallengesV1GetAllChallengeConfigs(ctx context.Context) (r LolChallengesV1GetAllChallengeConfigsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetAllChallengePercentiles implements lol-challenges-v1.getAllChallengePercentiles operation.
//
// Map of level to percentile of players who have achieved it - keys: ChallengeId -> Season -> Level
// -> percentile of players who achieved it.
//
// GET /lol/challenges/v1/challenges/percentiles
func (UnimplementedHandler) LolChallengesV1GetAllChallengePercentiles(ctx context.Context) (r LolChallengesV1GetAllChallengePercentilesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetChallengeConfigs implements lol-challenges-v1.getChallengeConfigs operation.
//
// Get challenge configuration (REST).
//
// GET /lol/challenges/v1/challenges/{challengeId}/config
func (UnimplementedHandler) LolChallengesV1GetChallengeConfigs(ctx context.Context, params LolChallengesV1GetChallengeConfigsParams) (r LolChallengesV1GetChallengeConfigsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetChallengeLeaderboards implements lol-challenges-v1.getChallengeLeaderboards operation.
//
// Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
//
// GET /lol/challenges/v1/challenges/{challengeId}/leaderboards/by-level/{level}
func (UnimplementedHandler) LolChallengesV1GetChallengeLeaderboards(ctx context.Context, params LolChallengesV1GetChallengeLeaderboardsParams) (r LolChallengesV1GetChallengeLeaderboardsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetChallengePercentiles implements lol-challenges-v1.getChallengePercentiles operation.
//
// Map of level to percentile of players who have achieved it.
//
// GET /lol/challenges/v1/challenges/{challengeId}/percentiles
func (UnimplementedHandler) LolChallengesV1GetChallengePercentiles(ctx context.Context, params LolChallengesV1GetChallengePercentilesParams) (r LolChallengesV1GetChallengePercentilesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolChallengesV1GetPlayerData implements lol-challenges-v1.getPlayerData operation.
//
// Returns player information with list of all progressed challenges (REST).
//
// GET /lol/challenges/v1/player-data/{puuid}
func (UnimplementedHandler) LolChallengesV1GetPlayerData(ctx context.Context, params LolChallengesV1GetPlayerDataParams) (r LolChallengesV1GetPlayerDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolRsoMatchV1GetMatch implements lol-rso-match-v1.getMatch operation.
//
// Get a match by match id.
//
// GET /lol/rso-match/v1/matches/{matchId}
func (UnimplementedHandler) LolRsoMatchV1GetMatch(ctx context.Context, params LolRsoMatchV1GetMatchParams) (r LolRsoMatchV1GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolRsoMatchV1GetMatchIds implements lol-rso-match-v1.getMatchIds operation.
//
// Get a list of match ids by player access token - Includes custom matches.
//
// GET /lol/rso-match/v1/matches/ids
func (UnimplementedHandler) LolRsoMatchV1GetMatchIds(ctx context.Context, params LolRsoMatchV1GetMatchIdsParams) (r LolRsoMatchV1GetMatchIdsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolRsoMatchV1GetTimeline implements lol-rso-match-v1.getTimeline operation.
//
// Get a match timeline by match id.
//
// GET /lol/rso-match/v1/matches/{matchId}/timeline
func (UnimplementedHandler) LolRsoMatchV1GetTimeline(ctx context.Context, params LolRsoMatchV1GetTimelineParams) (r LolRsoMatchV1GetTimelineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LolStatusV4GetPlatformData implements lol-status-v4.getPlatformData operation.
//
// Get League of Legends status for the given platform.
//
// GET /lol/status/v4/platform-data
func (UnimplementedHandler) LolStatusV4GetPlatformData(ctx context.Context) (r LolStatusV4GetPlatformDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorDeckV1CreateDeck implements lor-deck-v1.createDeck operation.
//
// Create a new deck for the calling user.
//
// POST /lor/deck/v1/decks/me
func (UnimplementedHandler) LorDeckV1CreateDeck(ctx context.Context, req *LorDeckV1NewDeckDto) (r LorDeckV1CreateDeckRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorDeckV1GetDecks implements lor-deck-v1.getDecks operation.
//
// Get a list of the calling user's decks.
//
// GET /lor/deck/v1/decks/me
func (UnimplementedHandler) LorDeckV1GetDecks(ctx context.Context) (r LorDeckV1GetDecksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorInventoryV1GetCards implements lor-inventory-v1.getCards operation.
//
// Return a list of cards owned by the calling user.
//
// GET /lor/inventory/v1/cards/me
func (UnimplementedHandler) LorInventoryV1GetCards(ctx context.Context) (r LorInventoryV1GetCardsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorMatchV1GetMatch implements lor-match-v1.getMatch operation.
//
// Get match by id.
//
// GET /lor/match/v1/matches/{matchId}
func (UnimplementedHandler) LorMatchV1GetMatch(ctx context.Context, params LorMatchV1GetMatchParams) (r LorMatchV1GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorMatchV1GetMatchIdsByPUUID implements lor-match-v1.getMatchIdsByPUUID operation.
//
// Get a list of match ids by PUUID.
//
// GET /lor/match/v1/matches/by-puuid/{puuid}/ids
func (UnimplementedHandler) LorMatchV1GetMatchIdsByPUUID(ctx context.Context, params LorMatchV1GetMatchIdsByPUUIDParams) (r LorMatchV1GetMatchIdsByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorRankedV1GetLeaderboards implements lor-ranked-v1.getLeaderboards operation.
//
// Get the players in Master tier.
//
// GET /lor/ranked/v1/leaderboards
func (UnimplementedHandler) LorRankedV1GetLeaderboards(ctx context.Context) (r LorRankedV1GetLeaderboardsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// LorStatusV1GetPlatformData implements lor-status-v1.getPlatformData operation.
//
// Get Legends of Runeterra status for the given platform.
//
// GET /lor/status/v1/platform-data
func (UnimplementedHandler) LorStatusV1GetPlatformData(ctx context.Context) (r LorStatusV1GetPlatformDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MatchV5GetMatch implements match-v5.getMatch operation.
//
// Get a match by match id.
//
// GET /lol/match/v5/matches/{matchId}
func (UnimplementedHandler) MatchV5GetMatch(ctx context.Context, params MatchV5GetMatchParams) (r MatchV5GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MatchV5GetMatchIdsByPUUID implements match-v5.getMatchIdsByPUUID operation.
//
// Get a list of match ids by puuid.
//
// GET /lol/match/v5/matches/by-puuid/{puuid}/ids
func (UnimplementedHandler) MatchV5GetMatchIdsByPUUID(ctx context.Context, params MatchV5GetMatchIdsByPUUIDParams) (r MatchV5GetMatchIdsByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MatchV5GetTimeline implements match-v5.getTimeline operation.
//
// Get a match timeline by match id.
//
// GET /lol/match/v5/matches/{matchId}/timeline
func (UnimplementedHandler) MatchV5GetTimeline(ctx context.Context, params MatchV5GetTimelineParams) (r MatchV5GetTimelineRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SpectatorTftV5GetCurrentGameInfoByPuuid implements spectator-tft-v5.getCurrentGameInfoByPuuid operation.
//
// Get current game information for the given puuid.
//
// GET /lol/spectator/tft/v5/active-games/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) SpectatorTftV5GetCurrentGameInfoByPuuid(ctx context.Context, params SpectatorTftV5GetCurrentGameInfoByPuuidParams) (r SpectatorTftV5GetCurrentGameInfoByPuuidRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SpectatorTftV5GetFeaturedGames implements spectator-tft-v5.getFeaturedGames operation.
//
// Get list of featured games.
//
// GET /lol/spectator/tft/v5/featured-games
func (UnimplementedHandler) SpectatorTftV5GetFeaturedGames(ctx context.Context) (r SpectatorTftV5GetFeaturedGamesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SpectatorV5GetCurrentGameInfoByPuuid implements spectator-v5.getCurrentGameInfoByPuuid operation.
//
// Get current game information for the given puuid.
//
// GET /lol/spectator/v5/active-games/by-summoner/{encryptedPUUID}
func (UnimplementedHandler) SpectatorV5GetCurrentGameInfoByPuuid(ctx context.Context, params SpectatorV5GetCurrentGameInfoByPuuidParams) (r SpectatorV5GetCurrentGameInfoByPuuidRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SpectatorV5GetFeaturedGames implements spectator-v5.getFeaturedGames operation.
//
// Get list of featured games.
//
// GET /lol/spectator/v5/featured-games
func (UnimplementedHandler) SpectatorV5GetFeaturedGames(ctx context.Context) (r SpectatorV5GetFeaturedGamesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SummonerV4GetByAccessToken implements summoner-v4.getByAccessToken operation.
//
// Get a summoner by access token.
//
// GET /lol/summoner/v4/summoners/me
func (UnimplementedHandler) SummonerV4GetByAccessToken(ctx context.Context) (r SummonerV4GetByAccessTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SummonerV4GetByPUUID implements summoner-v4.getByPUUID operation.
//
// Get a summoner by PUUID.
//
// GET /lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) SummonerV4GetByPUUID(ctx context.Context, params SummonerV4GetByPUUIDParams) (r SummonerV4GetByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetChallengerLeague implements tft-league-v1.getChallengerLeague operation.
//
// Get the challenger league.
//
// GET /tft/league/v1/challenger
func (UnimplementedHandler) TftLeagueV1GetChallengerLeague(ctx context.Context, params TftLeagueV1GetChallengerLeagueParams) (r TftLeagueV1GetChallengerLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetGrandmasterLeague implements tft-league-v1.getGrandmasterLeague operation.
//
// Get the grandmaster league.
//
// GET /tft/league/v1/grandmaster
func (UnimplementedHandler) TftLeagueV1GetGrandmasterLeague(ctx context.Context, params TftLeagueV1GetGrandmasterLeagueParams) (r TftLeagueV1GetGrandmasterLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetLeagueById implements tft-league-v1.getLeagueById operation.
//
// Get league with given ID, including inactive entries.
//
// GET /tft/league/v1/leagues/{leagueId}
func (UnimplementedHandler) TftLeagueV1GetLeagueById(ctx context.Context, params TftLeagueV1GetLeagueByIdParams) (r TftLeagueV1GetLeagueByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetLeagueEntries implements tft-league-v1.getLeagueEntries operation.
//
// Get all the league entries.
//
// GET /tft/league/v1/entries/{tier}/{division}
func (UnimplementedHandler) TftLeagueV1GetLeagueEntries(ctx context.Context, params TftLeagueV1GetLeagueEntriesParams) (r TftLeagueV1GetLeagueEntriesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetLeagueEntriesByPUUID implements tft-league-v1.getLeagueEntriesByPUUID operation.
//
// Get league entries in all queues for a given puuid.
//
// GET /tft/league/v1/by-puuid/{puuid}
func (UnimplementedHandler) TftLeagueV1GetLeagueEntriesByPUUID(ctx context.Context, params TftLeagueV1GetLeagueEntriesByPUUIDParams) (r TftLeagueV1GetLeagueEntriesByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetMasterLeague implements tft-league-v1.getMasterLeague operation.
//
// Get the master league.
//
// GET /tft/league/v1/master
func (UnimplementedHandler) TftLeagueV1GetMasterLeague(ctx context.Context, params TftLeagueV1GetMasterLeagueParams) (r TftLeagueV1GetMasterLeagueRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftLeagueV1GetTopRatedLadder implements tft-league-v1.getTopRatedLadder operation.
//
// Get the top rated ladder for given queue.
//
// GET /tft/league/v1/rated-ladders/{queue}/top
func (UnimplementedHandler) TftLeagueV1GetTopRatedLadder(ctx context.Context, params TftLeagueV1GetTopRatedLadderParams) (r TftLeagueV1GetTopRatedLadderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftMatchV1GetMatch implements tft-match-v1.getMatch operation.
//
// Get a match by match id.
//
// GET /tft/match/v1/matches/{matchId}
func (UnimplementedHandler) TftMatchV1GetMatch(ctx context.Context, params TftMatchV1GetMatchParams) (r TftMatchV1GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftMatchV1GetMatchIdsByPUUID implements tft-match-v1.getMatchIdsByPUUID operation.
//
// Get a list of match ids by PUUID.
//
// GET /tft/match/v1/matches/by-puuid/{puuid}/ids
func (UnimplementedHandler) TftMatchV1GetMatchIdsByPUUID(ctx context.Context, params TftMatchV1GetMatchIdsByPUUIDParams) (r TftMatchV1GetMatchIdsByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftStatusV1GetPlatformData implements tft-status-v1.getPlatformData operation.
//
// Get Teamfight Tactics status for the given platform.
//
// GET /tft/status/v1/platform-data
func (UnimplementedHandler) TftStatusV1GetPlatformData(ctx context.Context) (r TftStatusV1GetPlatformDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftSummonerV1GetByAccessToken implements tft-summoner-v1.getByAccessToken operation.
//
// Get a summoner by access token.
//
// GET /tft/summoner/v1/summoners/me
func (UnimplementedHandler) TftSummonerV1GetByAccessToken(ctx context.Context) (r TftSummonerV1GetByAccessTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TftSummonerV1GetByPUUID implements tft-summoner-v1.getByPUUID operation.
//
// Get a summoner by PUUID.
//
// GET /tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}
func (UnimplementedHandler) TftSummonerV1GetByPUUID(ctx context.Context, params TftSummonerV1GetByPUUIDParams) (r TftSummonerV1GetByPUUIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentStubV5CreateTournamentCode implements tournament-stub-v5.createTournamentCode operation.
//
// Create a tournament code for the given tournament - Stub method.
//
// POST /lol/tournament-stub/v5/codes
func (UnimplementedHandler) TournamentStubV5CreateTournamentCode(ctx context.Context, req *TournamentStubV5TournamentCodeParametersV5, params TournamentStubV5CreateTournamentCodeParams) (r TournamentStubV5CreateTournamentCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentStubV5GetLobbyEventsByCode implements tournament-stub-v5.getLobbyEventsByCode operation.
//
// Gets a list of lobby events by tournament code - Stub method.
//
// GET /lol/tournament-stub/v5/lobby-events/by-code/{tournamentCode}
func (UnimplementedHandler) TournamentStubV5GetLobbyEventsByCode(ctx context.Context, params TournamentStubV5GetLobbyEventsByCodeParams) (r TournamentStubV5GetLobbyEventsByCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentStubV5GetTournamentCode implements tournament-stub-v5.getTournamentCode operation.
//
// Returns the tournament code DTO associated with a tournament code string - Stub Method.
//
// GET /lol/tournament-stub/v5/codes/{tournamentCode}
func (UnimplementedHandler) TournamentStubV5GetTournamentCode(ctx context.Context, params TournamentStubV5GetTournamentCodeParams) (r TournamentStubV5GetTournamentCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentStubV5RegisterProviderData implements tournament-stub-v5.registerProviderData operation.
//
// Creates a tournament provider and returns its ID - Stub method
// ## Implementation Notes
// Providers will need to call this endpoint first to register their callback URL and their API key
// with the tournament system before any other tournament provider endpoints will work.
//
// POST /lol/tournament-stub/v5/providers
func (UnimplementedHandler) TournamentStubV5RegisterProviderData(ctx context.Context, req *TournamentStubV5ProviderRegistrationParametersV5) (r TournamentStubV5RegisterProviderDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentStubV5RegisterTournament implements tournament-stub-v5.registerTournament operation.
//
// Creates a tournament and returns its ID - Stub method.
//
// POST /lol/tournament-stub/v5/tournaments
func (UnimplementedHandler) TournamentStubV5RegisterTournament(ctx context.Context, req *TournamentStubV5TournamentRegistrationParametersV5) (r TournamentStubV5RegisterTournamentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5CreateTournamentCode implements tournament-v5.createTournamentCode operation.
//
// Create a tournament code for the given tournament.
//
// POST /lol/tournament/v5/codes
func (UnimplementedHandler) TournamentV5CreateTournamentCode(ctx context.Context, req *TournamentV5TournamentCodeParametersV5, params TournamentV5CreateTournamentCodeParams) (r TournamentV5CreateTournamentCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5GetGames implements tournament-v5.getGames operation.
//
// Get games details
// ## Implementation Notes
// Additional endpoint to get tournament games. From this endpoint, you are able to get participants
// PUUID (the callback doesn't contain this info).
// You can also use it to check if the game was recorded and validate callbacks. If the endpoint
// returns the game, it means a callback was attempted.
// This will only work for tournament codes created after November 10, 2023.
//
// GET /lol/tournament/v5/games/by-code/{tournamentCode}
func (UnimplementedHandler) TournamentV5GetGames(ctx context.Context, params TournamentV5GetGamesParams) (r TournamentV5GetGamesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5GetLobbyEventsByCode implements tournament-v5.getLobbyEventsByCode operation.
//
// Gets a list of lobby events by tournament code.
//
// GET /lol/tournament/v5/lobby-events/by-code/{tournamentCode}
func (UnimplementedHandler) TournamentV5GetLobbyEventsByCode(ctx context.Context, params TournamentV5GetLobbyEventsByCodeParams) (r TournamentV5GetLobbyEventsByCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5GetTournamentCode implements tournament-v5.getTournamentCode operation.
//
// Returns the tournament code DTO associated with a tournament code string.
//
// GET /lol/tournament/v5/codes/{tournamentCode}
func (UnimplementedHandler) TournamentV5GetTournamentCode(ctx context.Context, params TournamentV5GetTournamentCodeParams) (r TournamentV5GetTournamentCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5RegisterProviderData implements tournament-v5.registerProviderData operation.
//
// Creates a tournament provider and returns its ID.
// ## Implementation Notes
// Providers will need to call this endpoint first to register their callback URL and their API key
// with the tournament system before any other tournament provider endpoints will work.
//
// POST /lol/tournament/v5/providers
func (UnimplementedHandler) TournamentV5RegisterProviderData(ctx context.Context, req *TournamentV5ProviderRegistrationParametersV5) (r TournamentV5RegisterProviderDataRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5RegisterTournament implements tournament-v5.registerTournament operation.
//
// Creates a tournament and returns its ID.
//
// POST /lol/tournament/v5/tournaments
func (UnimplementedHandler) TournamentV5RegisterTournament(ctx context.Context, req *TournamentV5TournamentRegistrationParametersV5) (r TournamentV5RegisterTournamentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TournamentV5UpdateCode implements tournament-v5.updateCode operation.
//
// Update the pick type, map, spectator type, or allowed puuids for a code.
//
// PUT /lol/tournament/v5/codes/{tournamentCode}
func (UnimplementedHandler) TournamentV5UpdateCode(ctx context.Context, req OptTournamentV5TournamentCodeUpdateParametersV5, params TournamentV5UpdateCodeParams) (r TournamentV5UpdateCodeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValConsoleMatchV1GetMatch implements val-console-match-v1.getMatch operation.
//
// Get match by id.
//
// GET /val/match/console/v1/matches/{matchId}
func (UnimplementedHandler) ValConsoleMatchV1GetMatch(ctx context.Context, params ValConsoleMatchV1GetMatchParams) (r ValConsoleMatchV1GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValConsoleMatchV1GetMatchlist implements val-console-match-v1.getMatchlist operation.
//
// Get matchlist for games played by puuid and platform type.
//
// GET /val/match/console/v1/matchlists/by-puuid/{puuid}
func (UnimplementedHandler) ValConsoleMatchV1GetMatchlist(ctx context.Context, params ValConsoleMatchV1GetMatchlistParams) (r ValConsoleMatchV1GetMatchlistRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValConsoleMatchV1GetRecent implements val-console-match-v1.getRecent operation.
//
// Get recent matches
// ## Implementation Notes
// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12
// hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent
// matches will return a combined list of matches from those three regions. Requests are load
// balanced so you may see some inconsistencies as matches are added/removed from the list.
//
// GET /val/match/console/v1/recent-matches/by-queue/{queue}
func (UnimplementedHandler) ValConsoleMatchV1GetRecent(ctx context.Context, params ValConsoleMatchV1GetRecentParams) (r ValConsoleMatchV1GetRecentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValConsoleRankedV1GetLeaderboard implements val-console-ranked-v1.getLeaderboard operation.
//
// Get leaderboard for the competitive queue.
//
// GET /val/console/ranked/v1/leaderboards/by-act/{actId}
func (UnimplementedHandler) ValConsoleRankedV1GetLeaderboard(ctx context.Context, params ValConsoleRankedV1GetLeaderboardParams) (r ValConsoleRankedV1GetLeaderboardRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValContentV1GetContent implements val-content-v1.getContent operation.
//
// Get content optionally filtered by locale.
//
// GET /val/content/v1/contents
func (UnimplementedHandler) ValContentV1GetContent(ctx context.Context, params ValContentV1GetContentParams) (r ValContentV1GetContentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValMatchV1GetMatch implements val-match-v1.getMatch operation.
//
// Get match by id.
//
// GET /val/match/v1/matches/{matchId}
func (UnimplementedHandler) ValMatchV1GetMatch(ctx context.Context, params ValMatchV1GetMatchParams) (r ValMatchV1GetMatchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValMatchV1GetMatchlist implements val-match-v1.getMatchlist operation.
//
// Get matchlist for games played by puuid.
//
// GET /val/match/v1/matchlists/by-puuid/{puuid}
func (UnimplementedHandler) ValMatchV1GetMatchlist(ctx context.Context, params ValMatchV1GetMatchlistParams) (r ValMatchV1GetMatchlistRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValMatchV1GetRecent implements val-match-v1.getRecent operation.
//
// Get recent matches
// ## Implementation Notes
// Returns a list of match ids that have completed in the last 10 minutes for live regions and 12
// hours for the esports routing value. NA/LATAM/BR share a match history deployment. As such, recent
// matches will return a combined list of matches from those three regions. Requests are load
// balanced so you may see some inconsistencies as matches are added/removed from the list.
//
// GET /val/match/v1/recent-matches/by-queue/{queue}
func (UnimplementedHandler) ValMatchV1GetRecent(ctx context.Context, params ValMatchV1GetRecentParams) (r ValMatchV1GetRecentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValRankedV1GetLeaderboard implements val-ranked-v1.getLeaderboard operation.
//
// Get leaderboard for the competitive queue.
//
// GET /val/ranked/v1/leaderboards/by-act/{actId}
func (UnimplementedHandler) ValRankedV1GetLeaderboard(ctx context.Context, params ValRankedV1GetLeaderboardParams) (r ValRankedV1GetLeaderboardRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ValStatusV1GetPlatformData implements val-status-v1.getPlatformData operation.
//
// Get VALORANT status for the given platform.
//
// GET /val/status/v1/platform-data
func (UnimplementedHandler) ValStatusV1GetPlatformData(ctx context.Context) (r ValStatusV1GetPlatformDataRes, _ error) {
	return r, ht.ErrNotImplemented
}
