// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeAccountV1GetActiveRegionResponse(resp *http.Response) (res AccountV1GetActiveRegionRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccountV1AccountRegionDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &AccountV1GetActiveRegionBadRequest{}, nil
	case 401:
		// Code 401.
		return &AccountV1GetActiveRegionUnauthorized{}, nil
	case 403:
		// Code 403.
		return &AccountV1GetActiveRegionForbidden{}, nil
	case 404:
		// Code 404.
		return &AccountV1GetActiveRegionNotFound{}, nil
	case 405:
		// Code 405.
		return &AccountV1GetActiveRegionMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &AccountV1GetActiveRegionUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &AccountV1GetActiveRegionTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &AccountV1GetActiveRegionInternalServerError{}, nil
	case 502:
		// Code 502.
		return &AccountV1GetActiveRegionBadGateway{}, nil
	case 503:
		// Code 503.
		return &AccountV1GetActiveRegionServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &AccountV1GetActiveRegionGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccountV1GetActiveShardResponse(resp *http.Response) (res AccountV1GetActiveShardRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccountV1ActiveShardDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &AccountV1GetActiveShardBadRequest{}, nil
	case 401:
		// Code 401.
		return &AccountV1GetActiveShardUnauthorized{}, nil
	case 403:
		// Code 403.
		return &AccountV1GetActiveShardForbidden{}, nil
	case 404:
		// Code 404.
		return &AccountV1GetActiveShardNotFound{}, nil
	case 405:
		// Code 405.
		return &AccountV1GetActiveShardMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &AccountV1GetActiveShardUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &AccountV1GetActiveShardTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &AccountV1GetActiveShardInternalServerError{}, nil
	case 502:
		// Code 502.
		return &AccountV1GetActiveShardBadGateway{}, nil
	case 503:
		// Code 503.
		return &AccountV1GetActiveShardServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &AccountV1GetActiveShardGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccountV1GetByAccessTokenResponse(resp *http.Response) (res AccountV1GetByAccessTokenRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccountV1AccountDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &AccountV1GetByAccessTokenBadRequest{}, nil
	case 401:
		// Code 401.
		return &AccountV1GetByAccessTokenUnauthorized{}, nil
	case 403:
		// Code 403.
		return &AccountV1GetByAccessTokenForbidden{}, nil
	case 404:
		// Code 404.
		return &AccountV1GetByAccessTokenNotFound{}, nil
	case 405:
		// Code 405.
		return &AccountV1GetByAccessTokenMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &AccountV1GetByAccessTokenUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &AccountV1GetByAccessTokenTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &AccountV1GetByAccessTokenInternalServerError{}, nil
	case 502:
		// Code 502.
		return &AccountV1GetByAccessTokenBadGateway{}, nil
	case 503:
		// Code 503.
		return &AccountV1GetByAccessTokenServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &AccountV1GetByAccessTokenGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccountV1GetByPuuidResponse(resp *http.Response) (res AccountV1GetByPuuidRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccountV1AccountDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &AccountV1GetByPuuidBadRequest{}, nil
	case 401:
		// Code 401.
		return &AccountV1GetByPuuidUnauthorized{}, nil
	case 403:
		// Code 403.
		return &AccountV1GetByPuuidForbidden{}, nil
	case 404:
		// Code 404.
		return &AccountV1GetByPuuidNotFound{}, nil
	case 405:
		// Code 405.
		return &AccountV1GetByPuuidMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &AccountV1GetByPuuidUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &AccountV1GetByPuuidTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &AccountV1GetByPuuidInternalServerError{}, nil
	case 502:
		// Code 502.
		return &AccountV1GetByPuuidBadGateway{}, nil
	case 503:
		// Code 503.
		return &AccountV1GetByPuuidServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &AccountV1GetByPuuidGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeAccountV1GetByRiotIdResponse(resp *http.Response) (res AccountV1GetByRiotIdRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response AccountV1AccountDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &AccountV1GetByRiotIdBadRequest{}, nil
	case 401:
		// Code 401.
		return &AccountV1GetByRiotIdUnauthorized{}, nil
	case 403:
		// Code 403.
		return &AccountV1GetByRiotIdForbidden{}, nil
	case 404:
		// Code 404.
		return &AccountV1GetByRiotIdNotFound{}, nil
	case 405:
		// Code 405.
		return &AccountV1GetByRiotIdMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &AccountV1GetByRiotIdUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &AccountV1GetByRiotIdTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &AccountV1GetByRiotIdInternalServerError{}, nil
	case 502:
		// Code 502.
		return &AccountV1GetByRiotIdBadGateway{}, nil
	case 503:
		// Code 503.
		return &AccountV1GetByRiotIdServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &AccountV1GetByRiotIdGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChampionMasteryV4GetAllChampionMasteriesByPUUIDResponse(resp *http.Response) (res ChampionMasteryV4GetAllChampionMasteriesByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChampionMasteryV4GetAllChampionMasteriesByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ChampionMasteryV4GetAllChampionMasteriesByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChampionMasteryV4GetChampionMasteryByPUUIDResponse(resp *http.Response) (res ChampionMasteryV4GetChampionMasteryByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChampionMasteryV4ChampionMasteryDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ChampionMasteryV4GetChampionMasteryByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChampionMasteryV4GetChampionMasteryScoreByPUUIDResponse(resp *http.Response) (res ChampionMasteryV4GetChampionMasteryScoreByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChampionMasteryV4GetChampionMasteryScoreByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ChampionMasteryV4GetChampionMasteryScoreByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChampionMasteryV4GetTopChampionMasteriesByPUUIDResponse(resp *http.Response) (res ChampionMasteryV4GetTopChampionMasteriesByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChampionMasteryV4GetTopChampionMasteriesByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ChampionMasteryV4GetTopChampionMasteriesByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChampionV3GetChampionInfoResponse(resp *http.Response) (res ChampionV3GetChampionInfoRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChampionV3ChampionInfo
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChampionV3GetChampionInfoBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChampionV3GetChampionInfoUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChampionV3GetChampionInfoForbidden{}, nil
	case 404:
		// Code 404.
		return &ChampionV3GetChampionInfoNotFound{}, nil
	case 405:
		// Code 405.
		return &ChampionV3GetChampionInfoMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ChampionV3GetChampionInfoUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ChampionV3GetChampionInfoTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ChampionV3GetChampionInfoInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ChampionV3GetChampionInfoBadGateway{}, nil
	case 503:
		// Code 503.
		return &ChampionV3GetChampionInfoServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ChampionV3GetChampionInfoGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeClashV1GetPlayersByPUUIDResponse(resp *http.Response) (res ClashV1GetPlayersByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ClashV1GetPlayersByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ClashV1GetPlayersByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &ClashV1GetPlayersByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ClashV1GetPlayersByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &ClashV1GetPlayersByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &ClashV1GetPlayersByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ClashV1GetPlayersByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ClashV1GetPlayersByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ClashV1GetPlayersByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ClashV1GetPlayersByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &ClashV1GetPlayersByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ClashV1GetPlayersByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeClashV1GetTeamByIdResponse(resp *http.Response) (res ClashV1GetTeamByIdRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ClashV1TeamDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ClashV1GetTeamByIdBadRequest{}, nil
	case 401:
		// Code 401.
		return &ClashV1GetTeamByIdUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ClashV1GetTeamByIdForbidden{}, nil
	case 404:
		// Code 404.
		return &ClashV1GetTeamByIdNotFound{}, nil
	case 405:
		// Code 405.
		return &ClashV1GetTeamByIdMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ClashV1GetTeamByIdUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ClashV1GetTeamByIdTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ClashV1GetTeamByIdInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ClashV1GetTeamByIdBadGateway{}, nil
	case 503:
		// Code 503.
		return &ClashV1GetTeamByIdServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ClashV1GetTeamByIdGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeClashV1GetTournamentByIdResponse(resp *http.Response) (res ClashV1GetTournamentByIdRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ClashV1TournamentDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ClashV1GetTournamentByIdBadRequest{}, nil
	case 401:
		// Code 401.
		return &ClashV1GetTournamentByIdUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ClashV1GetTournamentByIdForbidden{}, nil
	case 404:
		// Code 404.
		return &ClashV1GetTournamentByIdNotFound{}, nil
	case 405:
		// Code 405.
		return &ClashV1GetTournamentByIdMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ClashV1GetTournamentByIdUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ClashV1GetTournamentByIdTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ClashV1GetTournamentByIdInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ClashV1GetTournamentByIdBadGateway{}, nil
	case 503:
		// Code 503.
		return &ClashV1GetTournamentByIdServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ClashV1GetTournamentByIdGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeClashV1GetTournamentByTeamResponse(resp *http.Response) (res ClashV1GetTournamentByTeamRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ClashV1TournamentDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ClashV1GetTournamentByTeamBadRequest{}, nil
	case 401:
		// Code 401.
		return &ClashV1GetTournamentByTeamUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ClashV1GetTournamentByTeamForbidden{}, nil
	case 404:
		// Code 404.
		return &ClashV1GetTournamentByTeamNotFound{}, nil
	case 405:
		// Code 405.
		return &ClashV1GetTournamentByTeamMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ClashV1GetTournamentByTeamUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ClashV1GetTournamentByTeamTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ClashV1GetTournamentByTeamInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ClashV1GetTournamentByTeamBadGateway{}, nil
	case 503:
		// Code 503.
		return &ClashV1GetTournamentByTeamServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ClashV1GetTournamentByTeamGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeClashV1GetTournamentsResponse(resp *http.Response) (res ClashV1GetTournamentsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ClashV1GetTournamentsOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ClashV1GetTournamentsBadRequest{}, nil
	case 401:
		// Code 401.
		return &ClashV1GetTournamentsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ClashV1GetTournamentsForbidden{}, nil
	case 404:
		// Code 404.
		return &ClashV1GetTournamentsNotFound{}, nil
	case 405:
		// Code 405.
		return &ClashV1GetTournamentsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ClashV1GetTournamentsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ClashV1GetTournamentsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ClashV1GetTournamentsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ClashV1GetTournamentsBadGateway{}, nil
	case 503:
		// Code 503.
		return &ClashV1GetTournamentsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ClashV1GetTournamentsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueExpV4GetLeagueEntriesResponse(resp *http.Response) (res LeagueExpV4GetLeagueEntriesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueExpV4GetLeagueEntriesOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueExpV4GetLeagueEntriesBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueExpV4GetLeagueEntriesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueExpV4GetLeagueEntriesForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueExpV4GetLeagueEntriesNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueExpV4GetLeagueEntriesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueExpV4GetLeagueEntriesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueExpV4GetLeagueEntriesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueExpV4GetLeagueEntriesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueExpV4GetLeagueEntriesBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueExpV4GetLeagueEntriesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueExpV4GetLeagueEntriesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetChallengerLeagueResponse(resp *http.Response) (res LeagueV4GetChallengerLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetChallengerLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetChallengerLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetChallengerLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetChallengerLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetChallengerLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetChallengerLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetChallengerLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetChallengerLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetChallengerLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetChallengerLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetChallengerLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetGrandmasterLeagueResponse(resp *http.Response) (res LeagueV4GetGrandmasterLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetGrandmasterLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetGrandmasterLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetGrandmasterLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetGrandmasterLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetGrandmasterLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetGrandmasterLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetGrandmasterLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetGrandmasterLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetGrandmasterLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetGrandmasterLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetGrandmasterLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetLeagueByIdResponse(resp *http.Response) (res LeagueV4GetLeagueByIdRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetLeagueByIdBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetLeagueByIdUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetLeagueByIdForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetLeagueByIdNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetLeagueByIdMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetLeagueByIdUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetLeagueByIdTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetLeagueByIdInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetLeagueByIdBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetLeagueByIdServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetLeagueByIdGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetLeagueEntriesResponse(resp *http.Response) (res LeagueV4GetLeagueEntriesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4GetLeagueEntriesOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetLeagueEntriesBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetLeagueEntriesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetLeagueEntriesForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetLeagueEntriesNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetLeagueEntriesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetLeagueEntriesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetLeagueEntriesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetLeagueEntriesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetLeagueEntriesBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetLeagueEntriesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetLeagueEntriesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetLeagueEntriesByPUUIDResponse(resp *http.Response) (res LeagueV4GetLeagueEntriesByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4GetLeagueEntriesByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetLeagueEntriesByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetLeagueEntriesByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetLeagueEntriesByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetLeagueEntriesByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetLeagueEntriesByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetLeagueEntriesByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetLeagueEntriesByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetLeagueEntriesByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetLeagueEntriesByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetLeagueEntriesByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetLeagueEntriesByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLeagueV4GetMasterLeagueResponse(resp *http.Response) (res LeagueV4GetMasterLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LeagueV4LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LeagueV4GetMasterLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &LeagueV4GetMasterLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LeagueV4GetMasterLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &LeagueV4GetMasterLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &LeagueV4GetMasterLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LeagueV4GetMasterLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LeagueV4GetMasterLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LeagueV4GetMasterLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LeagueV4GetMasterLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &LeagueV4GetMasterLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LeagueV4GetMasterLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetAllChallengeConfigsResponse(resp *http.Response) (res LolChallengesV1GetAllChallengeConfigsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1GetAllChallengeConfigsOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetAllChallengeConfigsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetAllChallengeConfigsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetAllChallengeConfigsForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetAllChallengeConfigsNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetAllChallengeConfigsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetAllChallengeConfigsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetAllChallengeConfigsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetAllChallengeConfigsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetAllChallengeConfigsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetAllChallengeConfigsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetAllChallengeConfigsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetAllChallengePercentilesResponse(resp *http.Response) (res LolChallengesV1GetAllChallengePercentilesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1GetAllChallengePercentilesOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetAllChallengePercentilesBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetAllChallengePercentilesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetAllChallengePercentilesForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetAllChallengePercentilesNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetAllChallengePercentilesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetAllChallengePercentilesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetAllChallengePercentilesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetAllChallengePercentilesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetAllChallengePercentilesBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetAllChallengePercentilesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetAllChallengePercentilesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetChallengeConfigsResponse(resp *http.Response) (res LolChallengesV1GetChallengeConfigsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1ChallengeConfigInfoDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetChallengeConfigsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetChallengeConfigsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetChallengeConfigsForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetChallengeConfigsNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetChallengeConfigsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetChallengeConfigsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetChallengeConfigsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetChallengeConfigsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetChallengeConfigsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetChallengeConfigsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetChallengeConfigsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetChallengeLeaderboardsResponse(resp *http.Response) (res LolChallengesV1GetChallengeLeaderboardsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1GetChallengeLeaderboardsOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetChallengeLeaderboardsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetChallengeLeaderboardsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetChallengeLeaderboardsForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetChallengeLeaderboardsNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetChallengeLeaderboardsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetChallengeLeaderboardsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetChallengeLeaderboardsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetChallengeLeaderboardsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetChallengeLeaderboardsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetChallengeLeaderboardsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetChallengeLeaderboardsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetChallengePercentilesResponse(resp *http.Response) (res LolChallengesV1GetChallengePercentilesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1GetChallengePercentilesOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetChallengePercentilesBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetChallengePercentilesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetChallengePercentilesForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetChallengePercentilesNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetChallengePercentilesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetChallengePercentilesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetChallengePercentilesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetChallengePercentilesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetChallengePercentilesBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetChallengePercentilesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetChallengePercentilesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolChallengesV1GetPlayerDataResponse(resp *http.Response) (res LolChallengesV1GetPlayerDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolChallengesV1PlayerInfoDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolChallengesV1GetPlayerDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolChallengesV1GetPlayerDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolChallengesV1GetPlayerDataForbidden{}, nil
	case 404:
		// Code 404.
		return &LolChallengesV1GetPlayerDataNotFound{}, nil
	case 405:
		// Code 405.
		return &LolChallengesV1GetPlayerDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolChallengesV1GetPlayerDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolChallengesV1GetPlayerDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolChallengesV1GetPlayerDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolChallengesV1GetPlayerDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolChallengesV1GetPlayerDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolChallengesV1GetPlayerDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolRsoMatchV1GetMatchResponse(resp *http.Response) (res LolRsoMatchV1GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MatchV5MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolRsoMatchV1GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolRsoMatchV1GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolRsoMatchV1GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &LolRsoMatchV1GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &LolRsoMatchV1GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolRsoMatchV1GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolRsoMatchV1GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolRsoMatchV1GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolRsoMatchV1GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolRsoMatchV1GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolRsoMatchV1GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolRsoMatchV1GetMatchIdsResponse(resp *http.Response) (res LolRsoMatchV1GetMatchIdsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolRsoMatchV1GetMatchIdsOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolRsoMatchV1GetMatchIdsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolRsoMatchV1GetMatchIdsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolRsoMatchV1GetMatchIdsForbidden{}, nil
	case 404:
		// Code 404.
		return &LolRsoMatchV1GetMatchIdsNotFound{}, nil
	case 405:
		// Code 405.
		return &LolRsoMatchV1GetMatchIdsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolRsoMatchV1GetMatchIdsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolRsoMatchV1GetMatchIdsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolRsoMatchV1GetMatchIdsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolRsoMatchV1GetMatchIdsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolRsoMatchV1GetMatchIdsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolRsoMatchV1GetMatchIdsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolRsoMatchV1GetTimelineResponse(resp *http.Response) (res LolRsoMatchV1GetTimelineRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MatchV5TimelineDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolRsoMatchV1GetTimelineBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolRsoMatchV1GetTimelineUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolRsoMatchV1GetTimelineForbidden{}, nil
	case 404:
		// Code 404.
		return &LolRsoMatchV1GetTimelineNotFound{}, nil
	case 405:
		// Code 405.
		return &LolRsoMatchV1GetTimelineMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolRsoMatchV1GetTimelineUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolRsoMatchV1GetTimelineTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolRsoMatchV1GetTimelineInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolRsoMatchV1GetTimelineBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolRsoMatchV1GetTimelineServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolRsoMatchV1GetTimelineGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLolStatusV4GetPlatformDataResponse(resp *http.Response) (res LolStatusV4GetPlatformDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LolStatusV4PlatformDataDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LolStatusV4GetPlatformDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &LolStatusV4GetPlatformDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LolStatusV4GetPlatformDataForbidden{}, nil
	case 404:
		// Code 404.
		return &LolStatusV4GetPlatformDataNotFound{}, nil
	case 405:
		// Code 405.
		return &LolStatusV4GetPlatformDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LolStatusV4GetPlatformDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LolStatusV4GetPlatformDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LolStatusV4GetPlatformDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LolStatusV4GetPlatformDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &LolStatusV4GetPlatformDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LolStatusV4GetPlatformDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorDeckV1CreateDeckResponse(resp *http.Response) (res LorDeckV1CreateDeckRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorDeckV1CreateDeckOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorDeckV1CreateDeckBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorDeckV1CreateDeckUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorDeckV1CreateDeckForbidden{}, nil
	case 404:
		// Code 404.
		return &LorDeckV1CreateDeckNotFound{}, nil
	case 405:
		// Code 405.
		return &LorDeckV1CreateDeckMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorDeckV1CreateDeckUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorDeckV1CreateDeckTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorDeckV1CreateDeckInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorDeckV1CreateDeckBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorDeckV1CreateDeckServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorDeckV1CreateDeckGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorDeckV1GetDecksResponse(resp *http.Response) (res LorDeckV1GetDecksRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorDeckV1GetDecksOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorDeckV1GetDecksBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorDeckV1GetDecksUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorDeckV1GetDecksForbidden{}, nil
	case 404:
		// Code 404.
		return &LorDeckV1GetDecksNotFound{}, nil
	case 405:
		// Code 405.
		return &LorDeckV1GetDecksMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorDeckV1GetDecksUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorDeckV1GetDecksTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorDeckV1GetDecksInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorDeckV1GetDecksBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorDeckV1GetDecksServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorDeckV1GetDecksGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorInventoryV1GetCardsResponse(resp *http.Response) (res LorInventoryV1GetCardsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorInventoryV1GetCardsOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorInventoryV1GetCardsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorInventoryV1GetCardsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorInventoryV1GetCardsForbidden{}, nil
	case 404:
		// Code 404.
		return &LorInventoryV1GetCardsNotFound{}, nil
	case 405:
		// Code 405.
		return &LorInventoryV1GetCardsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorInventoryV1GetCardsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorInventoryV1GetCardsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorInventoryV1GetCardsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorInventoryV1GetCardsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorInventoryV1GetCardsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorInventoryV1GetCardsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorMatchV1GetMatchResponse(resp *http.Response) (res LorMatchV1GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorMatchV1MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorMatchV1GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorMatchV1GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorMatchV1GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &LorMatchV1GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &LorMatchV1GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorMatchV1GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorMatchV1GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorMatchV1GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorMatchV1GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorMatchV1GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorMatchV1GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorMatchV1GetMatchIdsByPUUIDResponse(resp *http.Response) (res LorMatchV1GetMatchIdsByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorMatchV1GetMatchIdsByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorMatchV1GetMatchIdsByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorMatchV1GetMatchIdsByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorMatchV1GetMatchIdsByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &LorMatchV1GetMatchIdsByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &LorMatchV1GetMatchIdsByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorMatchV1GetMatchIdsByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorMatchV1GetMatchIdsByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorMatchV1GetMatchIdsByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorMatchV1GetMatchIdsByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorMatchV1GetMatchIdsByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorMatchV1GetMatchIdsByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorRankedV1GetLeaderboardsResponse(resp *http.Response) (res LorRankedV1GetLeaderboardsRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorRankedV1LeaderboardDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorRankedV1GetLeaderboardsBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorRankedV1GetLeaderboardsUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorRankedV1GetLeaderboardsForbidden{}, nil
	case 404:
		// Code 404.
		return &LorRankedV1GetLeaderboardsNotFound{}, nil
	case 405:
		// Code 405.
		return &LorRankedV1GetLeaderboardsMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorRankedV1GetLeaderboardsUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorRankedV1GetLeaderboardsTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorRankedV1GetLeaderboardsInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorRankedV1GetLeaderboardsBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorRankedV1GetLeaderboardsServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorRankedV1GetLeaderboardsGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeLorStatusV1GetPlatformDataResponse(resp *http.Response) (res LorStatusV1GetPlatformDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response LorStatusV1PlatformDataDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &LorStatusV1GetPlatformDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &LorStatusV1GetPlatformDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &LorStatusV1GetPlatformDataForbidden{}, nil
	case 404:
		// Code 404.
		return &LorStatusV1GetPlatformDataNotFound{}, nil
	case 405:
		// Code 405.
		return &LorStatusV1GetPlatformDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &LorStatusV1GetPlatformDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &LorStatusV1GetPlatformDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &LorStatusV1GetPlatformDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &LorStatusV1GetPlatformDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &LorStatusV1GetPlatformDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &LorStatusV1GetPlatformDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMatchV5GetMatchResponse(resp *http.Response) (res MatchV5GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MatchV5MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &MatchV5GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &MatchV5GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &MatchV5GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &MatchV5GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &MatchV5GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &MatchV5GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &MatchV5GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &MatchV5GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &MatchV5GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &MatchV5GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &MatchV5GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMatchV5GetMatchIdsByPUUIDResponse(resp *http.Response) (res MatchV5GetMatchIdsByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MatchV5GetMatchIdsByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &MatchV5GetMatchIdsByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &MatchV5GetMatchIdsByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &MatchV5GetMatchIdsByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &MatchV5GetMatchIdsByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &MatchV5GetMatchIdsByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &MatchV5GetMatchIdsByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &MatchV5GetMatchIdsByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &MatchV5GetMatchIdsByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &MatchV5GetMatchIdsByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &MatchV5GetMatchIdsByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &MatchV5GetMatchIdsByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeMatchV5GetTimelineResponse(resp *http.Response) (res MatchV5GetTimelineRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response MatchV5TimelineDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &MatchV5GetTimelineBadRequest{}, nil
	case 401:
		// Code 401.
		return &MatchV5GetTimelineUnauthorized{}, nil
	case 403:
		// Code 403.
		return &MatchV5GetTimelineForbidden{}, nil
	case 404:
		// Code 404.
		return &MatchV5GetTimelineNotFound{}, nil
	case 405:
		// Code 405.
		return &MatchV5GetTimelineMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &MatchV5GetTimelineUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &MatchV5GetTimelineTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &MatchV5GetTimelineInternalServerError{}, nil
	case 502:
		// Code 502.
		return &MatchV5GetTimelineBadGateway{}, nil
	case 503:
		// Code 503.
		return &MatchV5GetTimelineServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &MatchV5GetTimelineGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSpectatorTftV5GetCurrentGameInfoByPuuidResponse(resp *http.Response) (res SpectatorTftV5GetCurrentGameInfoByPuuidRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SpectatorTftV5CurrentGameInfo
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidBadRequest{}, nil
	case 401:
		// Code 401.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidForbidden{}, nil
	case 404:
		// Code 404.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidNotFound{}, nil
	case 405:
		// Code 405.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidBadGateway{}, nil
	case 503:
		// Code 503.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SpectatorTftV5GetCurrentGameInfoByPuuidGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSpectatorTftV5GetFeaturedGamesResponse(resp *http.Response) (res SpectatorTftV5GetFeaturedGamesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SpectatorTftV5FeaturedGames
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SpectatorTftV5GetFeaturedGamesBadRequest{}, nil
	case 401:
		// Code 401.
		return &SpectatorTftV5GetFeaturedGamesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SpectatorTftV5GetFeaturedGamesForbidden{}, nil
	case 404:
		// Code 404.
		return &SpectatorTftV5GetFeaturedGamesNotFound{}, nil
	case 405:
		// Code 405.
		return &SpectatorTftV5GetFeaturedGamesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SpectatorTftV5GetFeaturedGamesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SpectatorTftV5GetFeaturedGamesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SpectatorTftV5GetFeaturedGamesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SpectatorTftV5GetFeaturedGamesBadGateway{}, nil
	case 503:
		// Code 503.
		return &SpectatorTftV5GetFeaturedGamesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SpectatorTftV5GetFeaturedGamesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSpectatorV5GetCurrentGameInfoByPuuidResponse(resp *http.Response) (res SpectatorV5GetCurrentGameInfoByPuuidRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SpectatorV5CurrentGameInfo
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SpectatorV5GetCurrentGameInfoByPuuidBadRequest{}, nil
	case 401:
		// Code 401.
		return &SpectatorV5GetCurrentGameInfoByPuuidUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SpectatorV5GetCurrentGameInfoByPuuidForbidden{}, nil
	case 404:
		// Code 404.
		return &SpectatorV5GetCurrentGameInfoByPuuidNotFound{}, nil
	case 405:
		// Code 405.
		return &SpectatorV5GetCurrentGameInfoByPuuidMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SpectatorV5GetCurrentGameInfoByPuuidUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SpectatorV5GetCurrentGameInfoByPuuidTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SpectatorV5GetCurrentGameInfoByPuuidInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SpectatorV5GetCurrentGameInfoByPuuidBadGateway{}, nil
	case 503:
		// Code 503.
		return &SpectatorV5GetCurrentGameInfoByPuuidServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SpectatorV5GetCurrentGameInfoByPuuidGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSpectatorV5GetFeaturedGamesResponse(resp *http.Response) (res SpectatorV5GetFeaturedGamesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SpectatorV5FeaturedGames
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SpectatorV5GetFeaturedGamesBadRequest{}, nil
	case 401:
		// Code 401.
		return &SpectatorV5GetFeaturedGamesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SpectatorV5GetFeaturedGamesForbidden{}, nil
	case 404:
		// Code 404.
		return &SpectatorV5GetFeaturedGamesNotFound{}, nil
	case 405:
		// Code 405.
		return &SpectatorV5GetFeaturedGamesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SpectatorV5GetFeaturedGamesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SpectatorV5GetFeaturedGamesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SpectatorV5GetFeaturedGamesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SpectatorV5GetFeaturedGamesBadGateway{}, nil
	case 503:
		// Code 503.
		return &SpectatorV5GetFeaturedGamesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SpectatorV5GetFeaturedGamesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSummonerV4GetByAccessTokenResponse(resp *http.Response) (res SummonerV4GetByAccessTokenRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SummonerV4SummonerDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SummonerV4GetByAccessTokenBadRequest{}, nil
	case 401:
		// Code 401.
		return &SummonerV4GetByAccessTokenUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SummonerV4GetByAccessTokenForbidden{}, nil
	case 404:
		// Code 404.
		return &SummonerV4GetByAccessTokenNotFound{}, nil
	case 405:
		// Code 405.
		return &SummonerV4GetByAccessTokenMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SummonerV4GetByAccessTokenUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SummonerV4GetByAccessTokenTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SummonerV4GetByAccessTokenInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SummonerV4GetByAccessTokenBadGateway{}, nil
	case 503:
		// Code 503.
		return &SummonerV4GetByAccessTokenServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SummonerV4GetByAccessTokenGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSummonerV4GetByPUUIDResponse(resp *http.Response) (res SummonerV4GetByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SummonerV4SummonerDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &SummonerV4GetByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &SummonerV4GetByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &SummonerV4GetByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &SummonerV4GetByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &SummonerV4GetByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &SummonerV4GetByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &SummonerV4GetByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &SummonerV4GetByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &SummonerV4GetByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &SummonerV4GetByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &SummonerV4GetByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetChallengerLeagueResponse(resp *http.Response) (res TftLeagueV1GetChallengerLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetChallengerLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetChallengerLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetChallengerLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetChallengerLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetChallengerLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetChallengerLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetChallengerLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetChallengerLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetChallengerLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetChallengerLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetChallengerLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetGrandmasterLeagueResponse(resp *http.Response) (res TftLeagueV1GetGrandmasterLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetGrandmasterLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetGrandmasterLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetGrandmasterLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetGrandmasterLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetGrandmasterLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetGrandmasterLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetGrandmasterLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetGrandmasterLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetGrandmasterLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetGrandmasterLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetGrandmasterLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetLeagueByIdResponse(resp *http.Response) (res TftLeagueV1GetLeagueByIdRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetLeagueByIdBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetLeagueByIdUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetLeagueByIdForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetLeagueByIdNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetLeagueByIdMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetLeagueByIdUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetLeagueByIdTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetLeagueByIdInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetLeagueByIdBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetLeagueByIdServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetLeagueByIdGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetLeagueEntriesResponse(resp *http.Response) (res TftLeagueV1GetLeagueEntriesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1GetLeagueEntriesOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetLeagueEntriesBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetLeagueEntriesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetLeagueEntriesForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetLeagueEntriesNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetLeagueEntriesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetLeagueEntriesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetLeagueEntriesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetLeagueEntriesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetLeagueEntriesBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetLeagueEntriesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetLeagueEntriesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetLeagueEntriesByPUUIDResponse(resp *http.Response) (res TftLeagueV1GetLeagueEntriesByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1GetLeagueEntriesByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetLeagueEntriesByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetLeagueEntriesByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetLeagueEntriesByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetLeagueEntriesByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetLeagueEntriesByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetLeagueEntriesByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetLeagueEntriesByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetLeagueEntriesByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetLeagueEntriesByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetLeagueEntriesByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetLeagueEntriesByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetMasterLeagueResponse(resp *http.Response) (res TftLeagueV1GetMasterLeagueRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1LeagueListDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetMasterLeagueBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetMasterLeagueUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetMasterLeagueForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetMasterLeagueNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetMasterLeagueMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetMasterLeagueUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetMasterLeagueTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetMasterLeagueInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetMasterLeagueBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetMasterLeagueServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetMasterLeagueGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftLeagueV1GetTopRatedLadderResponse(resp *http.Response) (res TftLeagueV1GetTopRatedLadderRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftLeagueV1GetTopRatedLadderOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftLeagueV1GetTopRatedLadderBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftLeagueV1GetTopRatedLadderUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftLeagueV1GetTopRatedLadderForbidden{}, nil
	case 404:
		// Code 404.
		return &TftLeagueV1GetTopRatedLadderNotFound{}, nil
	case 405:
		// Code 405.
		return &TftLeagueV1GetTopRatedLadderMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftLeagueV1GetTopRatedLadderUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftLeagueV1GetTopRatedLadderTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftLeagueV1GetTopRatedLadderInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftLeagueV1GetTopRatedLadderBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftLeagueV1GetTopRatedLadderServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftLeagueV1GetTopRatedLadderGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftMatchV1GetMatchResponse(resp *http.Response) (res TftMatchV1GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftMatchV1MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftMatchV1GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftMatchV1GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftMatchV1GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &TftMatchV1GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &TftMatchV1GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftMatchV1GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftMatchV1GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftMatchV1GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftMatchV1GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftMatchV1GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftMatchV1GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftMatchV1GetMatchIdsByPUUIDResponse(resp *http.Response) (res TftMatchV1GetMatchIdsByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftMatchV1GetMatchIdsByPUUIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftMatchV1GetMatchIdsByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftMatchV1GetMatchIdsByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftMatchV1GetMatchIdsByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &TftMatchV1GetMatchIdsByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &TftMatchV1GetMatchIdsByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftMatchV1GetMatchIdsByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftMatchV1GetMatchIdsByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftMatchV1GetMatchIdsByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftMatchV1GetMatchIdsByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftMatchV1GetMatchIdsByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftMatchV1GetMatchIdsByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftStatusV1GetPlatformDataResponse(resp *http.Response) (res TftStatusV1GetPlatformDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftStatusV1PlatformDataDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftStatusV1GetPlatformDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftStatusV1GetPlatformDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftStatusV1GetPlatformDataForbidden{}, nil
	case 404:
		// Code 404.
		return &TftStatusV1GetPlatformDataNotFound{}, nil
	case 405:
		// Code 405.
		return &TftStatusV1GetPlatformDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftStatusV1GetPlatformDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftStatusV1GetPlatformDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftStatusV1GetPlatformDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftStatusV1GetPlatformDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftStatusV1GetPlatformDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftStatusV1GetPlatformDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftSummonerV1GetByAccessTokenResponse(resp *http.Response) (res TftSummonerV1GetByAccessTokenRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftSummonerV1SummonerDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftSummonerV1GetByAccessTokenBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftSummonerV1GetByAccessTokenUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftSummonerV1GetByAccessTokenForbidden{}, nil
	case 404:
		// Code 404.
		return &TftSummonerV1GetByAccessTokenNotFound{}, nil
	case 405:
		// Code 405.
		return &TftSummonerV1GetByAccessTokenMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftSummonerV1GetByAccessTokenUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftSummonerV1GetByAccessTokenTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftSummonerV1GetByAccessTokenInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftSummonerV1GetByAccessTokenBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftSummonerV1GetByAccessTokenServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftSummonerV1GetByAccessTokenGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTftSummonerV1GetByPUUIDResponse(resp *http.Response) (res TftSummonerV1GetByPUUIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TftSummonerV1SummonerDTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TftSummonerV1GetByPUUIDBadRequest{}, nil
	case 401:
		// Code 401.
		return &TftSummonerV1GetByPUUIDUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TftSummonerV1GetByPUUIDForbidden{}, nil
	case 404:
		// Code 404.
		return &TftSummonerV1GetByPUUIDNotFound{}, nil
	case 405:
		// Code 405.
		return &TftSummonerV1GetByPUUIDMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TftSummonerV1GetByPUUIDUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TftSummonerV1GetByPUUIDTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TftSummonerV1GetByPUUIDInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TftSummonerV1GetByPUUIDBadGateway{}, nil
	case 503:
		// Code 503.
		return &TftSummonerV1GetByPUUIDServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TftSummonerV1GetByPUUIDGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentStubV5CreateTournamentCodeResponse(resp *http.Response) (res TournamentStubV5CreateTournamentCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentStubV5CreateTournamentCodeOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentStubV5CreateTournamentCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentStubV5CreateTournamentCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentStubV5CreateTournamentCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentStubV5CreateTournamentCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentStubV5CreateTournamentCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentStubV5CreateTournamentCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentStubV5CreateTournamentCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentStubV5CreateTournamentCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentStubV5CreateTournamentCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentStubV5CreateTournamentCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentStubV5CreateTournamentCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentStubV5GetLobbyEventsByCodeResponse(resp *http.Response) (res TournamentStubV5GetLobbyEventsByCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentStubV5LobbyEventV5DTOWrapper
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentStubV5GetLobbyEventsByCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentStubV5GetLobbyEventsByCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentStubV5GetLobbyEventsByCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentStubV5GetLobbyEventsByCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentStubV5GetLobbyEventsByCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentStubV5GetLobbyEventsByCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentStubV5GetLobbyEventsByCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentStubV5GetLobbyEventsByCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentStubV5GetLobbyEventsByCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentStubV5GetLobbyEventsByCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentStubV5GetLobbyEventsByCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentStubV5GetTournamentCodeResponse(resp *http.Response) (res TournamentStubV5GetTournamentCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentStubV5TournamentCodeV5DTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentStubV5GetTournamentCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentStubV5GetTournamentCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentStubV5GetTournamentCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentStubV5GetTournamentCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentStubV5GetTournamentCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentStubV5GetTournamentCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentStubV5GetTournamentCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentStubV5GetTournamentCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentStubV5GetTournamentCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentStubV5GetTournamentCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentStubV5GetTournamentCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentStubV5RegisterProviderDataResponse(resp *http.Response) (res TournamentStubV5RegisterProviderDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentStubV5RegisterProviderDataOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentStubV5RegisterProviderDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentStubV5RegisterProviderDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentStubV5RegisterProviderDataForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentStubV5RegisterProviderDataNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentStubV5RegisterProviderDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentStubV5RegisterProviderDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentStubV5RegisterProviderDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentStubV5RegisterProviderDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentStubV5RegisterProviderDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentStubV5RegisterProviderDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentStubV5RegisterProviderDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentStubV5RegisterTournamentResponse(resp *http.Response) (res TournamentStubV5RegisterTournamentRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentStubV5RegisterTournamentOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentStubV5RegisterTournamentBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentStubV5RegisterTournamentUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentStubV5RegisterTournamentForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentStubV5RegisterTournamentNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentStubV5RegisterTournamentMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentStubV5RegisterTournamentUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentStubV5RegisterTournamentTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentStubV5RegisterTournamentInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentStubV5RegisterTournamentBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentStubV5RegisterTournamentServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentStubV5RegisterTournamentGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5CreateTournamentCodeResponse(resp *http.Response) (res TournamentV5CreateTournamentCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5CreateTournamentCodeOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5CreateTournamentCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5CreateTournamentCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5CreateTournamentCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5CreateTournamentCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5CreateTournamentCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5CreateTournamentCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5CreateTournamentCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5CreateTournamentCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5CreateTournamentCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5CreateTournamentCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5CreateTournamentCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5GetGamesResponse(resp *http.Response) (res TournamentV5GetGamesRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5GetGamesOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5GetGamesBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5GetGamesUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5GetGamesForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5GetGamesNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5GetGamesMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5GetGamesUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5GetGamesTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5GetGamesInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5GetGamesBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5GetGamesServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5GetGamesGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5GetLobbyEventsByCodeResponse(resp *http.Response) (res TournamentV5GetLobbyEventsByCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5LobbyEventV5DTOWrapper
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5GetLobbyEventsByCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5GetLobbyEventsByCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5GetLobbyEventsByCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5GetLobbyEventsByCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5GetLobbyEventsByCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5GetLobbyEventsByCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5GetLobbyEventsByCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5GetLobbyEventsByCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5GetLobbyEventsByCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5GetLobbyEventsByCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5GetLobbyEventsByCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5GetTournamentCodeResponse(resp *http.Response) (res TournamentV5GetTournamentCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5TournamentCodeV5DTO
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5GetTournamentCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5GetTournamentCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5GetTournamentCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5GetTournamentCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5GetTournamentCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5GetTournamentCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5GetTournamentCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5GetTournamentCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5GetTournamentCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5GetTournamentCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5GetTournamentCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5RegisterProviderDataResponse(resp *http.Response) (res TournamentV5RegisterProviderDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5RegisterProviderDataOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5RegisterProviderDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5RegisterProviderDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5RegisterProviderDataForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5RegisterProviderDataNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5RegisterProviderDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5RegisterProviderDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5RegisterProviderDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5RegisterProviderDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5RegisterProviderDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5RegisterProviderDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5RegisterProviderDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5RegisterTournamentResponse(resp *http.Response) (res TournamentV5RegisterTournamentRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TournamentV5RegisterTournamentOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TournamentV5RegisterTournamentBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5RegisterTournamentUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5RegisterTournamentForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5RegisterTournamentNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5RegisterTournamentMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5RegisterTournamentUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5RegisterTournamentTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5RegisterTournamentInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5RegisterTournamentBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5RegisterTournamentServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5RegisterTournamentGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTournamentV5UpdateCodeResponse(resp *http.Response) (res TournamentV5UpdateCodeRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TournamentV5UpdateCodeOK{}, nil
	case 400:
		// Code 400.
		return &TournamentV5UpdateCodeBadRequest{}, nil
	case 401:
		// Code 401.
		return &TournamentV5UpdateCodeUnauthorized{}, nil
	case 403:
		// Code 403.
		return &TournamentV5UpdateCodeForbidden{}, nil
	case 404:
		// Code 404.
		return &TournamentV5UpdateCodeNotFound{}, nil
	case 405:
		// Code 405.
		return &TournamentV5UpdateCodeMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &TournamentV5UpdateCodeUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &TournamentV5UpdateCodeTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &TournamentV5UpdateCodeInternalServerError{}, nil
	case 502:
		// Code 502.
		return &TournamentV5UpdateCodeBadGateway{}, nil
	case 503:
		// Code 503.
		return &TournamentV5UpdateCodeServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &TournamentV5UpdateCodeGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValConsoleMatchV1GetMatchResponse(resp *http.Response) (res ValConsoleMatchV1GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValConsoleMatchV1MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValConsoleMatchV1GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValConsoleMatchV1GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValConsoleMatchV1GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &ValConsoleMatchV1GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &ValConsoleMatchV1GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValConsoleMatchV1GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValConsoleMatchV1GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValConsoleMatchV1GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValConsoleMatchV1GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValConsoleMatchV1GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValConsoleMatchV1GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValConsoleMatchV1GetMatchlistResponse(resp *http.Response) (res ValConsoleMatchV1GetMatchlistRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValConsoleMatchV1MatchlistDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValConsoleMatchV1GetMatchlistBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValConsoleMatchV1GetMatchlistUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValConsoleMatchV1GetMatchlistForbidden{}, nil
	case 404:
		// Code 404.
		return &ValConsoleMatchV1GetMatchlistNotFound{}, nil
	case 405:
		// Code 405.
		return &ValConsoleMatchV1GetMatchlistMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValConsoleMatchV1GetMatchlistUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValConsoleMatchV1GetMatchlistTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValConsoleMatchV1GetMatchlistInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValConsoleMatchV1GetMatchlistBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValConsoleMatchV1GetMatchlistServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValConsoleMatchV1GetMatchlistGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValConsoleMatchV1GetRecentResponse(resp *http.Response) (res ValConsoleMatchV1GetRecentRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValConsoleMatchV1RecentMatchesDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValConsoleMatchV1GetRecentBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValConsoleMatchV1GetRecentUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValConsoleMatchV1GetRecentForbidden{}, nil
	case 404:
		// Code 404.
		return &ValConsoleMatchV1GetRecentNotFound{}, nil
	case 405:
		// Code 405.
		return &ValConsoleMatchV1GetRecentMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValConsoleMatchV1GetRecentUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValConsoleMatchV1GetRecentTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValConsoleMatchV1GetRecentInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValConsoleMatchV1GetRecentBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValConsoleMatchV1GetRecentServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValConsoleMatchV1GetRecentGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValConsoleRankedV1GetLeaderboardResponse(resp *http.Response) (res ValConsoleRankedV1GetLeaderboardRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValConsoleRankedV1LeaderboardDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValConsoleRankedV1GetLeaderboardBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValConsoleRankedV1GetLeaderboardUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValConsoleRankedV1GetLeaderboardForbidden{}, nil
	case 404:
		// Code 404.
		return &ValConsoleRankedV1GetLeaderboardNotFound{}, nil
	case 405:
		// Code 405.
		return &ValConsoleRankedV1GetLeaderboardMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValConsoleRankedV1GetLeaderboardUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValConsoleRankedV1GetLeaderboardTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValConsoleRankedV1GetLeaderboardInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValConsoleRankedV1GetLeaderboardBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValConsoleRankedV1GetLeaderboardServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValConsoleRankedV1GetLeaderboardGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValContentV1GetContentResponse(resp *http.Response) (res ValContentV1GetContentRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValContentV1ContentDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValContentV1GetContentBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValContentV1GetContentUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValContentV1GetContentForbidden{}, nil
	case 404:
		// Code 404.
		return &ValContentV1GetContentNotFound{}, nil
	case 405:
		// Code 405.
		return &ValContentV1GetContentMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValContentV1GetContentUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValContentV1GetContentTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValContentV1GetContentInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValContentV1GetContentBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValContentV1GetContentServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValContentV1GetContentGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValMatchV1GetMatchResponse(resp *http.Response) (res ValMatchV1GetMatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValMatchV1MatchDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValMatchV1GetMatchBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValMatchV1GetMatchUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValMatchV1GetMatchForbidden{}, nil
	case 404:
		// Code 404.
		return &ValMatchV1GetMatchNotFound{}, nil
	case 405:
		// Code 405.
		return &ValMatchV1GetMatchMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValMatchV1GetMatchUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValMatchV1GetMatchTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValMatchV1GetMatchInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValMatchV1GetMatchBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValMatchV1GetMatchServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValMatchV1GetMatchGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValMatchV1GetMatchlistResponse(resp *http.Response) (res ValMatchV1GetMatchlistRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValMatchV1MatchlistDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValMatchV1GetMatchlistBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValMatchV1GetMatchlistUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValMatchV1GetMatchlistForbidden{}, nil
	case 404:
		// Code 404.
		return &ValMatchV1GetMatchlistNotFound{}, nil
	case 405:
		// Code 405.
		return &ValMatchV1GetMatchlistMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValMatchV1GetMatchlistUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValMatchV1GetMatchlistTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValMatchV1GetMatchlistInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValMatchV1GetMatchlistBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValMatchV1GetMatchlistServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValMatchV1GetMatchlistGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValMatchV1GetRecentResponse(resp *http.Response) (res ValMatchV1GetRecentRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValMatchV1RecentMatchesDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValMatchV1GetRecentBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValMatchV1GetRecentUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValMatchV1GetRecentForbidden{}, nil
	case 404:
		// Code 404.
		return &ValMatchV1GetRecentNotFound{}, nil
	case 405:
		// Code 405.
		return &ValMatchV1GetRecentMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValMatchV1GetRecentUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValMatchV1GetRecentTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValMatchV1GetRecentInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValMatchV1GetRecentBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValMatchV1GetRecentServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValMatchV1GetRecentGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValRankedV1GetLeaderboardResponse(resp *http.Response) (res ValRankedV1GetLeaderboardRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValRankedV1LeaderboardDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValRankedV1GetLeaderboardBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValRankedV1GetLeaderboardUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValRankedV1GetLeaderboardForbidden{}, nil
	case 404:
		// Code 404.
		return &ValRankedV1GetLeaderboardNotFound{}, nil
	case 405:
		// Code 405.
		return &ValRankedV1GetLeaderboardMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValRankedV1GetLeaderboardUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValRankedV1GetLeaderboardTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValRankedV1GetLeaderboardInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValRankedV1GetLeaderboardBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValRankedV1GetLeaderboardServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValRankedV1GetLeaderboardGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeValStatusV1GetPlatformDataResponse(resp *http.Response) (res ValStatusV1GetPlatformDataRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ValStatusV1PlatformDataDto
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ValStatusV1GetPlatformDataBadRequest{}, nil
	case 401:
		// Code 401.
		return &ValStatusV1GetPlatformDataUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ValStatusV1GetPlatformDataForbidden{}, nil
	case 404:
		// Code 404.
		return &ValStatusV1GetPlatformDataNotFound{}, nil
	case 405:
		// Code 405.
		return &ValStatusV1GetPlatformDataMethodNotAllowed{}, nil
	case 415:
		// Code 415.
		return &ValStatusV1GetPlatformDataUnsupportedMediaType{}, nil
	case 429:
		// Code 429.
		return &ValStatusV1GetPlatformDataTooManyRequests{}, nil
	case 500:
		// Code 500.
		return &ValStatusV1GetPlatformDataInternalServerError{}, nil
	case 502:
		// Code 502.
		return &ValStatusV1GetPlatformDataBadGateway{}, nil
	case 503:
		// Code 503.
		return &ValStatusV1GetPlatformDataServiceUnavailable{}, nil
	case 504:
		// Code 504.
		return &ValStatusV1GetPlatformDataGatewayTimeout{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
