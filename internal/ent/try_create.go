// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/lupanarbot/internal/ent/try"
	"github.com/google/uuid"
)

// TryCreate is the builder for creating a Try entity.
type TryCreate struct {
	config
	mutation *TryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tc *TryCreate) SetUserID(i int64) *TryCreate {
	tc.mutation.SetUserID(i)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TryCreate) SetCreatedAt(t time.Time) *TryCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetType sets the "type" field.
func (tc *TryCreate) SetType(t try.Type) *TryCreate {
	tc.mutation.SetType(t)
	return tc
}

// SetID sets the "id" field.
func (tc *TryCreate) SetID(u uuid.UUID) *TryCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TryCreate) SetNillableID(u *uuid.UUID) *TryCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// Mutation returns the TryMutation object of the builder.
func (tc *TryCreate) Mutation() *TryMutation {
	return tc.mutation
}

// Save creates the Try in the database.
func (tc *TryCreate) Save(ctx context.Context) (*Try, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TryCreate) SaveX(ctx context.Context) *Try {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TryCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TryCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TryCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := try.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TryCreate) check() error {
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Try.user_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Try.created_at"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Try.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := try.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Try.type": %w`, err)}
		}
	}
	return nil
}

func (tc *TryCreate) sqlSave(ctx context.Context) (*Try, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TryCreate) createSpec() (*Try, *sqlgraph.CreateSpec) {
	var (
		_node = &Try{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(try.Table, sqlgraph.NewFieldSpec(try.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(try.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(try.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(try.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Try.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tc *TryCreate) OnConflict(opts ...sql.ConflictOption) *TryUpsertOne {
	tc.conflict = opts
	return &TryUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Try.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TryCreate) OnConflictColumns(columns ...string) *TryUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TryUpsertOne{
		create: tc,
	}
}

type (
	// TryUpsertOne is the builder for "upsert"-ing
	//  one Try node.
	TryUpsertOne struct {
		create *TryCreate
	}

	// TryUpsert is the "OnConflict" setter.
	TryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *TryUpsert) SetUserID(v int64) *TryUpsert {
	u.Set(try.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TryUpsert) UpdateUserID() *TryUpsert {
	u.SetExcluded(try.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *TryUpsert) AddUserID(v int64) *TryUpsert {
	u.Add(try.FieldUserID, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TryUpsert) SetCreatedAt(v time.Time) *TryUpsert {
	u.Set(try.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TryUpsert) UpdateCreatedAt() *TryUpsert {
	u.SetExcluded(try.FieldCreatedAt)
	return u
}

// SetType sets the "type" field.
func (u *TryUpsert) SetType(v try.Type) *TryUpsert {
	u.Set(try.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TryUpsert) UpdateType() *TryUpsert {
	u.SetExcluded(try.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Try.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(try.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TryUpsertOne) UpdateNewValues() *TryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(try.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Try.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TryUpsertOne) Ignore() *TryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TryUpsertOne) DoNothing() *TryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TryCreate.OnConflict
// documentation for more info.
func (u *TryUpsertOne) Update(set func(*TryUpsert)) *TryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TryUpsertOne) SetUserID(v int64) *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *TryUpsertOne) AddUserID(v int64) *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TryUpsertOne) UpdateUserID() *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.UpdateUserID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TryUpsertOne) SetCreatedAt(v time.Time) *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TryUpsertOne) UpdateCreatedAt() *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *TryUpsertOne) SetType(v try.Type) *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TryUpsertOne) UpdateType() *TryUpsertOne {
	return u.Update(func(s *TryUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *TryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TryUpsertOne.ID is not supported by MySQL driver. Use TryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TryCreateBulk is the builder for creating many Try entities in bulk.
type TryCreateBulk struct {
	config
	err      error
	builders []*TryCreate
	conflict []sql.ConflictOption
}

// Save creates the Try entities in the database.
func (tcb *TryCreateBulk) Save(ctx context.Context) ([]*Try, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Try, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TryCreateBulk) SaveX(ctx context.Context) []*Try {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TryCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TryCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Try.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TryUpsertBulk {
	tcb.conflict = opts
	return &TryUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Try.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TryCreateBulk) OnConflictColumns(columns ...string) *TryUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TryUpsertBulk{
		create: tcb,
	}
}

// TryUpsertBulk is the builder for "upsert"-ing
// a bulk of Try nodes.
type TryUpsertBulk struct {
	create *TryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Try.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(try.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TryUpsertBulk) UpdateNewValues() *TryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(try.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Try.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TryUpsertBulk) Ignore() *TryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TryUpsertBulk) DoNothing() *TryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TryCreateBulk.OnConflict
// documentation for more info.
func (u *TryUpsertBulk) Update(set func(*TryUpsert)) *TryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TryUpsertBulk) SetUserID(v int64) *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *TryUpsertBulk) AddUserID(v int64) *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TryUpsertBulk) UpdateUserID() *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.UpdateUserID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TryUpsertBulk) SetCreatedAt(v time.Time) *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TryUpsertBulk) UpdateCreatedAt() *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetType sets the "type" field.
func (u *TryUpsertBulk) SetType(v try.Type) *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TryUpsertBulk) UpdateType() *TryUpsertBulk {
	return u.Update(func(s *TryUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *TryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
