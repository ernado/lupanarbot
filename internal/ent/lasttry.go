// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ernado/lupanarbot/internal/ent/lasttry"
)

// LastTry is the model entity for the LastTry schema.
type LastTry struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Try holds the value of the "try" field.
	Try time.Time `json:"try,omitempty"`
	// Type holds the value of the "type" field.
	Type         lasttry.Type `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LastTry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lasttry.FieldID:
			values[i] = new(sql.NullInt64)
		case lasttry.FieldType:
			values[i] = new(sql.NullString)
		case lasttry.FieldTry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LastTry fields.
func (lt *LastTry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lasttry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lt.ID = int64(value.Int64)
		case lasttry.FieldTry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field try", values[i])
			} else if value.Valid {
				lt.Try = value.Time
			}
		case lasttry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				lt.Type = lasttry.Type(value.String)
			}
		default:
			lt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LastTry.
// This includes values selected through modifiers, order, etc.
func (lt *LastTry) Value(name string) (ent.Value, error) {
	return lt.selectValues.Get(name)
}

// Update returns a builder for updating this LastTry.
// Note that you need to call LastTry.Unwrap() before calling this method if this LastTry
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LastTry) Update() *LastTryUpdateOne {
	return NewLastTryClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LastTry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LastTry) Unwrap() *LastTry {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LastTry is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LastTry) String() string {
	var builder strings.Builder
	builder.WriteString("LastTry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("try=")
	builder.WriteString(lt.Try.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", lt.Type))
	builder.WriteByte(')')
	return builder.String()
}

// LastTries is a parsable slice of LastTry.
type LastTries []*LastTry
