// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/lupanarbot/internal/ent/predicate"
	"github.com/ernado/lupanarbot/internal/ent/try"
)

// TryUpdate is the builder for updating Try entities.
type TryUpdate struct {
	config
	hooks    []Hook
	mutation *TryMutation
}

// Where appends a list predicates to the TryUpdate builder.
func (tu *TryUpdate) Where(ps ...predicate.Try) *TryUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TryUpdate) SetCreatedAt(t time.Time) *TryUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TryUpdate) SetNillableCreatedAt(t *time.Time) *TryUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TryUpdate) SetType(t try.Type) *TryUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TryUpdate) SetNillableType(t *try.Type) *TryUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// Mutation returns the TryMutation object of the builder.
func (tu *TryUpdate) Mutation() *TryMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TryUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TryUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TryUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TryUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := try.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Try.type": %w`, err)}
		}
	}
	return nil
}

func (tu *TryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(try.Table, try.Columns, sqlgraph.NewFieldSpec(try.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(try.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(try.FieldType, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{try.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TryUpdateOne is the builder for updating a single Try entity.
type TryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TryMutation
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TryUpdateOne) SetCreatedAt(t time.Time) *TryUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TryUpdateOne) SetNillableCreatedAt(t *time.Time) *TryUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TryUpdateOne) SetType(t try.Type) *TryUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TryUpdateOne) SetNillableType(t *try.Type) *TryUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// Mutation returns the TryMutation object of the builder.
func (tuo *TryUpdateOne) Mutation() *TryMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TryUpdate builder.
func (tuo *TryUpdateOne) Where(ps ...predicate.Try) *TryUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TryUpdateOne) Select(field string, fields ...string) *TryUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Try entity.
func (tuo *TryUpdateOne) Save(ctx context.Context) (*Try, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TryUpdateOne) SaveX(ctx context.Context) *Try {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TryUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TryUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TryUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := try.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Try.type": %w`, err)}
		}
	}
	return nil
}

func (tuo *TryUpdateOne) sqlSave(ctx context.Context) (_node *Try, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(try.Table, try.Columns, sqlgraph.NewFieldSpec(try.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Try.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, try.FieldID)
		for _, f := range fields {
			if !try.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != try.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(try.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(try.FieldType, field.TypeEnum, value)
	}
	_node = &Try{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{try.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
