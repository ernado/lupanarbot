// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/lupanarbot/internal/ent/lasttry"
)

// LastTryCreate is the builder for creating a LastTry entity.
type LastTryCreate struct {
	config
	mutation *LastTryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTry sets the "try" field.
func (ltc *LastTryCreate) SetTry(t time.Time) *LastTryCreate {
	ltc.mutation.SetTry(t)
	return ltc
}

// SetType sets the "type" field.
func (ltc *LastTryCreate) SetType(l lasttry.Type) *LastTryCreate {
	ltc.mutation.SetType(l)
	return ltc
}

// SetID sets the "id" field.
func (ltc *LastTryCreate) SetID(i int64) *LastTryCreate {
	ltc.mutation.SetID(i)
	return ltc
}

// Mutation returns the LastTryMutation object of the builder.
func (ltc *LastTryCreate) Mutation() *LastTryMutation {
	return ltc.mutation
}

// Save creates the LastTry in the database.
func (ltc *LastTryCreate) Save(ctx context.Context) (*LastTry, error) {
	return withHooks(ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LastTryCreate) SaveX(ctx context.Context) *LastTry {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LastTryCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LastTryCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LastTryCreate) check() error {
	if _, ok := ltc.mutation.Try(); !ok {
		return &ValidationError{Name: "try", err: errors.New(`ent: missing required field "LastTry.try"`)}
	}
	if _, ok := ltc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "LastTry.type"`)}
	}
	if v, ok := ltc.mutation.GetType(); ok {
		if err := lasttry.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LastTry.type": %w`, err)}
		}
	}
	return nil
}

func (ltc *LastTryCreate) sqlSave(ctx context.Context) (*LastTry, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LastTryCreate) createSpec() (*LastTry, *sqlgraph.CreateSpec) {
	var (
		_node = &LastTry{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(lasttry.Table, sqlgraph.NewFieldSpec(lasttry.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ltc.conflict
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ltc.mutation.Try(); ok {
		_spec.SetField(lasttry.FieldTry, field.TypeTime, value)
		_node.Try = value
	}
	if value, ok := ltc.mutation.GetType(); ok {
		_spec.SetField(lasttry.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LastTry.Create().
//		SetTry(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LastTryUpsert) {
//			SetTry(v+v).
//		}).
//		Exec(ctx)
func (ltc *LastTryCreate) OnConflict(opts ...sql.ConflictOption) *LastTryUpsertOne {
	ltc.conflict = opts
	return &LastTryUpsertOne{
		create: ltc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LastTry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltc *LastTryCreate) OnConflictColumns(columns ...string) *LastTryUpsertOne {
	ltc.conflict = append(ltc.conflict, sql.ConflictColumns(columns...))
	return &LastTryUpsertOne{
		create: ltc,
	}
}

type (
	// LastTryUpsertOne is the builder for "upsert"-ing
	//  one LastTry node.
	LastTryUpsertOne struct {
		create *LastTryCreate
	}

	// LastTryUpsert is the "OnConflict" setter.
	LastTryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTry sets the "try" field.
func (u *LastTryUpsert) SetTry(v time.Time) *LastTryUpsert {
	u.Set(lasttry.FieldTry, v)
	return u
}

// UpdateTry sets the "try" field to the value that was provided on create.
func (u *LastTryUpsert) UpdateTry() *LastTryUpsert {
	u.SetExcluded(lasttry.FieldTry)
	return u
}

// SetType sets the "type" field.
func (u *LastTryUpsert) SetType(v lasttry.Type) *LastTryUpsert {
	u.Set(lasttry.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LastTryUpsert) UpdateType() *LastTryUpsert {
	u.SetExcluded(lasttry.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LastTry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lasttry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LastTryUpsertOne) UpdateNewValues() *LastTryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(lasttry.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LastTry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LastTryUpsertOne) Ignore() *LastTryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LastTryUpsertOne) DoNothing() *LastTryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LastTryCreate.OnConflict
// documentation for more info.
func (u *LastTryUpsertOne) Update(set func(*LastTryUpsert)) *LastTryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LastTryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTry sets the "try" field.
func (u *LastTryUpsertOne) SetTry(v time.Time) *LastTryUpsertOne {
	return u.Update(func(s *LastTryUpsert) {
		s.SetTry(v)
	})
}

// UpdateTry sets the "try" field to the value that was provided on create.
func (u *LastTryUpsertOne) UpdateTry() *LastTryUpsertOne {
	return u.Update(func(s *LastTryUpsert) {
		s.UpdateTry()
	})
}

// SetType sets the "type" field.
func (u *LastTryUpsertOne) SetType(v lasttry.Type) *LastTryUpsertOne {
	return u.Update(func(s *LastTryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LastTryUpsertOne) UpdateType() *LastTryUpsertOne {
	return u.Update(func(s *LastTryUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *LastTryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LastTryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LastTryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LastTryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LastTryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LastTryCreateBulk is the builder for creating many LastTry entities in bulk.
type LastTryCreateBulk struct {
	config
	err      error
	builders []*LastTryCreate
	conflict []sql.ConflictOption
}

// Save creates the LastTry entities in the database.
func (ltcb *LastTryCreateBulk) Save(ctx context.Context) ([]*LastTry, error) {
	if ltcb.err != nil {
		return nil, ltcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LastTry, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LastTryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ltcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LastTryCreateBulk) SaveX(ctx context.Context) []*LastTry {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LastTryCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LastTryCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LastTry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LastTryUpsert) {
//			SetTry(v+v).
//		}).
//		Exec(ctx)
func (ltcb *LastTryCreateBulk) OnConflict(opts ...sql.ConflictOption) *LastTryUpsertBulk {
	ltcb.conflict = opts
	return &LastTryUpsertBulk{
		create: ltcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LastTry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltcb *LastTryCreateBulk) OnConflictColumns(columns ...string) *LastTryUpsertBulk {
	ltcb.conflict = append(ltcb.conflict, sql.ConflictColumns(columns...))
	return &LastTryUpsertBulk{
		create: ltcb,
	}
}

// LastTryUpsertBulk is the builder for "upsert"-ing
// a bulk of LastTry nodes.
type LastTryUpsertBulk struct {
	create *LastTryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LastTry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(lasttry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LastTryUpsertBulk) UpdateNewValues() *LastTryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(lasttry.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LastTry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LastTryUpsertBulk) Ignore() *LastTryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LastTryUpsertBulk) DoNothing() *LastTryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LastTryCreateBulk.OnConflict
// documentation for more info.
func (u *LastTryUpsertBulk) Update(set func(*LastTryUpsert)) *LastTryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LastTryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTry sets the "try" field.
func (u *LastTryUpsertBulk) SetTry(v time.Time) *LastTryUpsertBulk {
	return u.Update(func(s *LastTryUpsert) {
		s.SetTry(v)
	})
}

// UpdateTry sets the "try" field to the value that was provided on create.
func (u *LastTryUpsertBulk) UpdateTry() *LastTryUpsertBulk {
	return u.Update(func(s *LastTryUpsert) {
		s.UpdateTry()
	})
}

// SetType sets the "type" field.
func (u *LastTryUpsertBulk) SetType(v lasttry.Type) *LastTryUpsertBulk {
	return u.Update(func(s *LastTryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LastTryUpsertBulk) UpdateType() *LastTryUpsertBulk {
	return u.Update(func(s *LastTryUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *LastTryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LastTryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LastTryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LastTryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
