// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ernado/lupanarbot/internal/ent/lasttry"
	"github.com/ernado/lupanarbot/internal/ent/predicate"
	"github.com/ernado/lupanarbot/internal/ent/telegramchannel"
	"github.com/ernado/lupanarbot/internal/ent/telegramsession"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLastTry         = "LastTry"
	TypeTelegramChannel = "TelegramChannel"
	TypeTelegramSession = "TelegramSession"
)

// LastTryMutation represents an operation that mutates the LastTry nodes in the graph.
type LastTryMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	try           *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LastTry, error)
	predicates    []predicate.LastTry
}

var _ ent.Mutation = (*LastTryMutation)(nil)

// lasttryOption allows management of the mutation configuration using functional options.
type lasttryOption func(*LastTryMutation)

// newLastTryMutation creates new mutation for the LastTry entity.
func newLastTryMutation(c config, op Op, opts ...lasttryOption) *LastTryMutation {
	m := &LastTryMutation{
		config:        c,
		op:            op,
		typ:           TypeLastTry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLastTryID sets the ID field of the mutation.
func withLastTryID(id int64) lasttryOption {
	return func(m *LastTryMutation) {
		var (
			err   error
			once  sync.Once
			value *LastTry
		)
		m.oldValue = func(ctx context.Context) (*LastTry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LastTry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLastTry sets the old LastTry of the mutation.
func withLastTry(node *LastTry) lasttryOption {
	return func(m *LastTryMutation) {
		m.oldValue = func(context.Context) (*LastTry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LastTryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LastTryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LastTry entities.
func (m *LastTryMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LastTryMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LastTryMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LastTry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTry sets the "try" field.
func (m *LastTryMutation) SetTry(t time.Time) {
	m.try = &t
}

// Try returns the value of the "try" field in the mutation.
func (m *LastTryMutation) Try() (r time.Time, exists bool) {
	v := m.try
	if v == nil {
		return
	}
	return *v, true
}

// OldTry returns the old "try" field's value of the LastTry entity.
// If the LastTry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LastTryMutation) OldTry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTry: %w", err)
	}
	return oldValue.Try, nil
}

// ResetTry resets all changes to the "try" field.
func (m *LastTryMutation) ResetTry() {
	m.try = nil
}

// Where appends a list predicates to the LastTryMutation builder.
func (m *LastTryMutation) Where(ps ...predicate.LastTry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LastTryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LastTryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LastTry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LastTryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LastTryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LastTry).
func (m *LastTryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LastTryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.try != nil {
		fields = append(fields, lasttry.FieldTry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LastTryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lasttry.FieldTry:
		return m.Try()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LastTryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lasttry.FieldTry:
		return m.OldTry(ctx)
	}
	return nil, fmt.Errorf("unknown LastTry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LastTryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lasttry.FieldTry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTry(v)
		return nil
	}
	return fmt.Errorf("unknown LastTry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LastTryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LastTryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LastTryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LastTry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LastTryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LastTryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LastTryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LastTry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LastTryMutation) ResetField(name string) error {
	switch name {
	case lasttry.FieldTry:
		m.ResetTry()
		return nil
	}
	return fmt.Errorf("unknown LastTry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LastTryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LastTryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LastTryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LastTryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LastTryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LastTryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LastTryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LastTry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LastTryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LastTry edge %s", name)
}

// TelegramChannelMutation represents an operation that mutates the TelegramChannel nodes in the graph.
type TelegramChannelMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	access_hash    *int64
	addaccess_hash *int64
	title          *string
	active         *bool
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TelegramChannel, error)
	predicates     []predicate.TelegramChannel
}

var _ ent.Mutation = (*TelegramChannelMutation)(nil)

// telegramchannelOption allows management of the mutation configuration using functional options.
type telegramchannelOption func(*TelegramChannelMutation)

// newTelegramChannelMutation creates new mutation for the TelegramChannel entity.
func newTelegramChannelMutation(c config, op Op, opts ...telegramchannelOption) *TelegramChannelMutation {
	m := &TelegramChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramChannelID sets the ID field of the mutation.
func withTelegramChannelID(id int64) telegramchannelOption {
	return func(m *TelegramChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramChannel
		)
		m.oldValue = func(ctx context.Context) (*TelegramChannel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramChannel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramChannel sets the old TelegramChannel of the mutation.
func withTelegramChannel(node *TelegramChannel) telegramchannelOption {
	return func(m *TelegramChannelMutation) {
		m.oldValue = func(context.Context) (*TelegramChannel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TelegramChannel entities.
func (m *TelegramChannelMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramChannelMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramChannelMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramChannel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccessHash sets the "access_hash" field.
func (m *TelegramChannelMutation) SetAccessHash(i int64) {
	m.access_hash = &i
	m.addaccess_hash = nil
}

// AccessHash returns the value of the "access_hash" field in the mutation.
func (m *TelegramChannelMutation) AccessHash() (r int64, exists bool) {
	v := m.access_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessHash returns the old "access_hash" field's value of the TelegramChannel entity.
// If the TelegramChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChannelMutation) OldAccessHash(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessHash: %w", err)
	}
	return oldValue.AccessHash, nil
}

// AddAccessHash adds i to the "access_hash" field.
func (m *TelegramChannelMutation) AddAccessHash(i int64) {
	if m.addaccess_hash != nil {
		*m.addaccess_hash += i
	} else {
		m.addaccess_hash = &i
	}
}

// AddedAccessHash returns the value that was added to the "access_hash" field in this mutation.
func (m *TelegramChannelMutation) AddedAccessHash() (r int64, exists bool) {
	v := m.addaccess_hash
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccessHash resets all changes to the "access_hash" field.
func (m *TelegramChannelMutation) ResetAccessHash() {
	m.access_hash = nil
	m.addaccess_hash = nil
}

// SetTitle sets the "title" field.
func (m *TelegramChannelMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TelegramChannelMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TelegramChannel entity.
// If the TelegramChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChannelMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TelegramChannelMutation) ResetTitle() {
	m.title = nil
}

// SetActive sets the "active" field.
func (m *TelegramChannelMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *TelegramChannelMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the TelegramChannel entity.
// If the TelegramChannel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramChannelMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *TelegramChannelMutation) ResetActive() {
	m.active = nil
}

// Where appends a list predicates to the TelegramChannelMutation builder.
func (m *TelegramChannelMutation) Where(ps ...predicate.TelegramChannel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TelegramChannelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TelegramChannelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TelegramChannel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TelegramChannelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TelegramChannelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TelegramChannel).
func (m *TelegramChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramChannelMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.access_hash != nil {
		fields = append(fields, telegramchannel.FieldAccessHash)
	}
	if m.title != nil {
		fields = append(fields, telegramchannel.FieldTitle)
	}
	if m.active != nil {
		fields = append(fields, telegramchannel.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramchannel.FieldAccessHash:
		return m.AccessHash()
	case telegramchannel.FieldTitle:
		return m.Title()
	case telegramchannel.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramchannel.FieldAccessHash:
		return m.OldAccessHash(ctx)
	case telegramchannel.FieldTitle:
		return m.OldTitle(ctx)
	case telegramchannel.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramChannel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramchannel.FieldAccessHash:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessHash(v)
		return nil
	case telegramchannel.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case telegramchannel.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChannel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramChannelMutation) AddedFields() []string {
	var fields []string
	if m.addaccess_hash != nil {
		fields = append(fields, telegramchannel.FieldAccessHash)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case telegramchannel.FieldAccessHash:
		return m.AddedAccessHash()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case telegramchannel.FieldAccessHash:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccessHash(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramChannel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramChannel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramChannelMutation) ResetField(name string) error {
	switch name {
	case telegramchannel.FieldAccessHash:
		m.ResetAccessHash()
		return nil
	case telegramchannel.FieldTitle:
		m.ResetTitle()
		return nil
	case telegramchannel.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown TelegramChannel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramChannelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramChannelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramChannelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramChannelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TelegramChannel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramChannelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TelegramChannel edge %s", name)
}

// TelegramSessionMutation represents an operation that mutates the TelegramSession nodes in the graph.
type TelegramSessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	data          *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TelegramSession, error)
	predicates    []predicate.TelegramSession
}

var _ ent.Mutation = (*TelegramSessionMutation)(nil)

// telegramsessionOption allows management of the mutation configuration using functional options.
type telegramsessionOption func(*TelegramSessionMutation)

// newTelegramSessionMutation creates new mutation for the TelegramSession entity.
func newTelegramSessionMutation(c config, op Op, opts ...telegramsessionOption) *TelegramSessionMutation {
	m := &TelegramSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeTelegramSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelegramSessionID sets the ID field of the mutation.
func withTelegramSessionID(id int) telegramsessionOption {
	return func(m *TelegramSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *TelegramSession
		)
		m.oldValue = func(ctx context.Context) (*TelegramSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TelegramSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelegramSession sets the old TelegramSession of the mutation.
func withTelegramSession(node *TelegramSession) telegramsessionOption {
	return func(m *TelegramSessionMutation) {
		m.oldValue = func(context.Context) (*TelegramSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelegramSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelegramSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TelegramSession entities.
func (m *TelegramSessionMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelegramSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelegramSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TelegramSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetData sets the "data" field.
func (m *TelegramSessionMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *TelegramSessionMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the TelegramSession entity.
// If the TelegramSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelegramSessionMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *TelegramSessionMutation) ResetData() {
	m.data = nil
}

// Where appends a list predicates to the TelegramSessionMutation builder.
func (m *TelegramSessionMutation) Where(ps ...predicate.TelegramSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TelegramSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TelegramSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TelegramSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TelegramSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TelegramSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TelegramSession).
func (m *TelegramSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelegramSessionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.data != nil {
		fields = append(fields, telegramsession.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelegramSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telegramsession.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelegramSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telegramsession.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown TelegramSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telegramsession.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown TelegramSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelegramSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelegramSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelegramSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TelegramSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelegramSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelegramSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelegramSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TelegramSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelegramSessionMutation) ResetField(name string) error {
	switch name {
	case telegramsession.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown TelegramSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelegramSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelegramSessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelegramSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelegramSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelegramSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelegramSessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelegramSessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TelegramSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelegramSessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TelegramSession edge %s", name)
}
