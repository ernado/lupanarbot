// Code generated by ent, DO NOT EDIT.

package lasttry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ernado/lupanarbot/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.LastTry {
	return predicate.LastTry(sql.FieldLTE(FieldID, id))
}

// Try applies equality check predicate on the "try" field. It's identical to TryEQ.
func Try(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldEQ(FieldTry, v))
}

// TryEQ applies the EQ predicate on the "try" field.
func TryEQ(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldEQ(FieldTry, v))
}

// TryNEQ applies the NEQ predicate on the "try" field.
func TryNEQ(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldNEQ(FieldTry, v))
}

// TryIn applies the In predicate on the "try" field.
func TryIn(vs ...time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldIn(FieldTry, vs...))
}

// TryNotIn applies the NotIn predicate on the "try" field.
func TryNotIn(vs ...time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldNotIn(FieldTry, vs...))
}

// TryGT applies the GT predicate on the "try" field.
func TryGT(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldGT(FieldTry, v))
}

// TryGTE applies the GTE predicate on the "try" field.
func TryGTE(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldGTE(FieldTry, v))
}

// TryLT applies the LT predicate on the "try" field.
func TryLT(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldLT(FieldTry, v))
}

// TryLTE applies the LTE predicate on the "try" field.
func TryLTE(v time.Time) predicate.LastTry {
	return predicate.LastTry(sql.FieldLTE(FieldTry, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LastTry) predicate.LastTry {
	return predicate.LastTry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LastTry) predicate.LastTry {
	return predicate.LastTry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LastTry) predicate.LastTry {
	return predicate.LastTry(sql.NotPredicates(p))
}
