// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cydev/cgbot/internal/ent/telegramchannel"
)

// TelegramChannelCreate is the builder for creating a TelegramChannel entity.
type TelegramChannelCreate struct {
	config
	mutation *TelegramChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAccessHash sets the "access_hash" field.
func (tcc *TelegramChannelCreate) SetAccessHash(i int64) *TelegramChannelCreate {
	tcc.mutation.SetAccessHash(i)
	return tcc
}

// SetTitle sets the "title" field.
func (tcc *TelegramChannelCreate) SetTitle(s string) *TelegramChannelCreate {
	tcc.mutation.SetTitle(s)
	return tcc
}

// SetSaveRecords sets the "save_records" field.
func (tcc *TelegramChannelCreate) SetSaveRecords(b bool) *TelegramChannelCreate {
	tcc.mutation.SetSaveRecords(b)
	return tcc
}

// SetNillableSaveRecords sets the "save_records" field if the given value is not nil.
func (tcc *TelegramChannelCreate) SetNillableSaveRecords(b *bool) *TelegramChannelCreate {
	if b != nil {
		tcc.SetSaveRecords(*b)
	}
	return tcc
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (tcc *TelegramChannelCreate) SetSaveFavoriteRecords(b bool) *TelegramChannelCreate {
	tcc.mutation.SetSaveFavoriteRecords(b)
	return tcc
}

// SetNillableSaveFavoriteRecords sets the "save_favorite_records" field if the given value is not nil.
func (tcc *TelegramChannelCreate) SetNillableSaveFavoriteRecords(b *bool) *TelegramChannelCreate {
	if b != nil {
		tcc.SetSaveFavoriteRecords(*b)
	}
	return tcc
}

// SetActive sets the "active" field.
func (tcc *TelegramChannelCreate) SetActive(b bool) *TelegramChannelCreate {
	tcc.mutation.SetActive(b)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TelegramChannelCreate) SetID(i int64) *TelegramChannelCreate {
	tcc.mutation.SetID(i)
	return tcc
}

// Mutation returns the TelegramChannelMutation object of the builder.
func (tcc *TelegramChannelCreate) Mutation() *TelegramChannelMutation {
	return tcc.mutation
}

// Save creates the TelegramChannel in the database.
func (tcc *TelegramChannelCreate) Save(ctx context.Context) (*TelegramChannel, error) {
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TelegramChannelCreate) SaveX(ctx context.Context) *TelegramChannel {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TelegramChannelCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TelegramChannelCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TelegramChannelCreate) check() error {
	if _, ok := tcc.mutation.AccessHash(); !ok {
		return &ValidationError{Name: "access_hash", err: errors.New(`ent: missing required field "TelegramChannel.access_hash"`)}
	}
	if _, ok := tcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TelegramChannel.title"`)}
	}
	if _, ok := tcc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "TelegramChannel.active"`)}
	}
	return nil
}

func (tcc *TelegramChannelCreate) sqlSave(ctx context.Context) (*TelegramChannel, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TelegramChannelCreate) createSpec() (*TelegramChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramChannel{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(telegramchannel.Table, sqlgraph.NewFieldSpec(telegramchannel.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.AccessHash(); ok {
		_spec.SetField(telegramchannel.FieldAccessHash, field.TypeInt64, value)
		_node.AccessHash = value
	}
	if value, ok := tcc.mutation.Title(); ok {
		_spec.SetField(telegramchannel.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tcc.mutation.SaveRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveRecords, field.TypeBool, value)
		_node.SaveRecords = value
	}
	if value, ok := tcc.mutation.SaveFavoriteRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveFavoriteRecords, field.TypeBool, value)
		_node.SaveFavoriteRecords = value
	}
	if value, ok := tcc.mutation.Active(); ok {
		_spec.SetField(telegramchannel.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramChannel.Create().
//		SetAccessHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramChannelUpsert) {
//			SetAccessHash(v+v).
//		}).
//		Exec(ctx)
func (tcc *TelegramChannelCreate) OnConflict(opts ...sql.ConflictOption) *TelegramChannelUpsertOne {
	tcc.conflict = opts
	return &TelegramChannelUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TelegramChannelCreate) OnConflictColumns(columns ...string) *TelegramChannelUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TelegramChannelUpsertOne{
		create: tcc,
	}
}

type (
	// TelegramChannelUpsertOne is the builder for "upsert"-ing
	//  one TelegramChannel node.
	TelegramChannelUpsertOne struct {
		create *TelegramChannelCreate
	}

	// TelegramChannelUpsert is the "OnConflict" setter.
	TelegramChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetAccessHash sets the "access_hash" field.
func (u *TelegramChannelUpsert) SetAccessHash(v int64) *TelegramChannelUpsert {
	u.Set(telegramchannel.FieldAccessHash, v)
	return u
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramChannelUpsert) UpdateAccessHash() *TelegramChannelUpsert {
	u.SetExcluded(telegramchannel.FieldAccessHash)
	return u
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramChannelUpsert) AddAccessHash(v int64) *TelegramChannelUpsert {
	u.Add(telegramchannel.FieldAccessHash, v)
	return u
}

// SetTitle sets the "title" field.
func (u *TelegramChannelUpsert) SetTitle(v string) *TelegramChannelUpsert {
	u.Set(telegramchannel.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TelegramChannelUpsert) UpdateTitle() *TelegramChannelUpsert {
	u.SetExcluded(telegramchannel.FieldTitle)
	return u
}

// SetSaveRecords sets the "save_records" field.
func (u *TelegramChannelUpsert) SetSaveRecords(v bool) *TelegramChannelUpsert {
	u.Set(telegramchannel.FieldSaveRecords, v)
	return u
}

// UpdateSaveRecords sets the "save_records" field to the value that was provided on create.
func (u *TelegramChannelUpsert) UpdateSaveRecords() *TelegramChannelUpsert {
	u.SetExcluded(telegramchannel.FieldSaveRecords)
	return u
}

// ClearSaveRecords clears the value of the "save_records" field.
func (u *TelegramChannelUpsert) ClearSaveRecords() *TelegramChannelUpsert {
	u.SetNull(telegramchannel.FieldSaveRecords)
	return u
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (u *TelegramChannelUpsert) SetSaveFavoriteRecords(v bool) *TelegramChannelUpsert {
	u.Set(telegramchannel.FieldSaveFavoriteRecords, v)
	return u
}

// UpdateSaveFavoriteRecords sets the "save_favorite_records" field to the value that was provided on create.
func (u *TelegramChannelUpsert) UpdateSaveFavoriteRecords() *TelegramChannelUpsert {
	u.SetExcluded(telegramchannel.FieldSaveFavoriteRecords)
	return u
}

// ClearSaveFavoriteRecords clears the value of the "save_favorite_records" field.
func (u *TelegramChannelUpsert) ClearSaveFavoriteRecords() *TelegramChannelUpsert {
	u.SetNull(telegramchannel.FieldSaveFavoriteRecords)
	return u
}

// SetActive sets the "active" field.
func (u *TelegramChannelUpsert) SetActive(v bool) *TelegramChannelUpsert {
	u.Set(telegramchannel.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TelegramChannelUpsert) UpdateActive() *TelegramChannelUpsert {
	u.SetExcluded(telegramchannel.FieldActive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramChannelUpsertOne) UpdateNewValues() *TelegramChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(telegramchannel.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TelegramChannelUpsertOne) Ignore() *TelegramChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramChannelUpsertOne) DoNothing() *TelegramChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramChannelCreate.OnConflict
// documentation for more info.
func (u *TelegramChannelUpsertOne) Update(set func(*TelegramChannelUpsert)) *TelegramChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessHash sets the "access_hash" field.
func (u *TelegramChannelUpsertOne) SetAccessHash(v int64) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetAccessHash(v)
	})
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramChannelUpsertOne) AddAccessHash(v int64) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.AddAccessHash(v)
	})
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramChannelUpsertOne) UpdateAccessHash() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateAccessHash()
	})
}

// SetTitle sets the "title" field.
func (u *TelegramChannelUpsertOne) SetTitle(v string) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TelegramChannelUpsertOne) UpdateTitle() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateTitle()
	})
}

// SetSaveRecords sets the "save_records" field.
func (u *TelegramChannelUpsertOne) SetSaveRecords(v bool) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetSaveRecords(v)
	})
}

// UpdateSaveRecords sets the "save_records" field to the value that was provided on create.
func (u *TelegramChannelUpsertOne) UpdateSaveRecords() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateSaveRecords()
	})
}

// ClearSaveRecords clears the value of the "save_records" field.
func (u *TelegramChannelUpsertOne) ClearSaveRecords() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.ClearSaveRecords()
	})
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (u *TelegramChannelUpsertOne) SetSaveFavoriteRecords(v bool) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetSaveFavoriteRecords(v)
	})
}

// UpdateSaveFavoriteRecords sets the "save_favorite_records" field to the value that was provided on create.
func (u *TelegramChannelUpsertOne) UpdateSaveFavoriteRecords() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateSaveFavoriteRecords()
	})
}

// ClearSaveFavoriteRecords clears the value of the "save_favorite_records" field.
func (u *TelegramChannelUpsertOne) ClearSaveFavoriteRecords() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.ClearSaveFavoriteRecords()
	})
}

// SetActive sets the "active" field.
func (u *TelegramChannelUpsertOne) SetActive(v bool) *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TelegramChannelUpsertOne) UpdateActive() *TelegramChannelUpsertOne {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *TelegramChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TelegramChannelUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TelegramChannelUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TelegramChannelCreateBulk is the builder for creating many TelegramChannel entities in bulk.
type TelegramChannelCreateBulk struct {
	config
	err      error
	builders []*TelegramChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the TelegramChannel entities in the database.
func (tccb *TelegramChannelCreateBulk) Save(ctx context.Context) ([]*TelegramChannel, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TelegramChannel, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TelegramChannelCreateBulk) SaveX(ctx context.Context) []*TelegramChannel {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TelegramChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TelegramChannelCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramChannel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramChannelUpsert) {
//			SetAccessHash(v+v).
//		}).
//		Exec(ctx)
func (tccb *TelegramChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *TelegramChannelUpsertBulk {
	tccb.conflict = opts
	return &TelegramChannelUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TelegramChannelCreateBulk) OnConflictColumns(columns ...string) *TelegramChannelUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TelegramChannelUpsertBulk{
		create: tccb,
	}
}

// TelegramChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of TelegramChannel nodes.
type TelegramChannelUpsertBulk struct {
	create *TelegramChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramChannelUpsertBulk) UpdateNewValues() *TelegramChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(telegramchannel.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramChannel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TelegramChannelUpsertBulk) Ignore() *TelegramChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramChannelUpsertBulk) DoNothing() *TelegramChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramChannelCreateBulk.OnConflict
// documentation for more info.
func (u *TelegramChannelUpsertBulk) Update(set func(*TelegramChannelUpsert)) *TelegramChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetAccessHash sets the "access_hash" field.
func (u *TelegramChannelUpsertBulk) SetAccessHash(v int64) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetAccessHash(v)
	})
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramChannelUpsertBulk) AddAccessHash(v int64) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.AddAccessHash(v)
	})
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramChannelUpsertBulk) UpdateAccessHash() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateAccessHash()
	})
}

// SetTitle sets the "title" field.
func (u *TelegramChannelUpsertBulk) SetTitle(v string) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TelegramChannelUpsertBulk) UpdateTitle() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateTitle()
	})
}

// SetSaveRecords sets the "save_records" field.
func (u *TelegramChannelUpsertBulk) SetSaveRecords(v bool) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetSaveRecords(v)
	})
}

// UpdateSaveRecords sets the "save_records" field to the value that was provided on create.
func (u *TelegramChannelUpsertBulk) UpdateSaveRecords() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateSaveRecords()
	})
}

// ClearSaveRecords clears the value of the "save_records" field.
func (u *TelegramChannelUpsertBulk) ClearSaveRecords() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.ClearSaveRecords()
	})
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (u *TelegramChannelUpsertBulk) SetSaveFavoriteRecords(v bool) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetSaveFavoriteRecords(v)
	})
}

// UpdateSaveFavoriteRecords sets the "save_favorite_records" field to the value that was provided on create.
func (u *TelegramChannelUpsertBulk) UpdateSaveFavoriteRecords() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateSaveFavoriteRecords()
	})
}

// ClearSaveFavoriteRecords clears the value of the "save_favorite_records" field.
func (u *TelegramChannelUpsertBulk) ClearSaveFavoriteRecords() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.ClearSaveFavoriteRecords()
	})
}

// SetActive sets the "active" field.
func (u *TelegramChannelUpsertBulk) SetActive(v bool) *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TelegramChannelUpsertBulk) UpdateActive() *TelegramChannelUpsertBulk {
	return u.Update(func(s *TelegramChannelUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *TelegramChannelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TelegramChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
